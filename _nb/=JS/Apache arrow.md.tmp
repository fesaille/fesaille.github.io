<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## Imports
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
const fetch = require("node-fetch");
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
const arrow = require('apache-arrow');
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
dataUrl = "https://raw.githubusercontent.com/RandomFractals/ChicagoCrimes/master/data/chicago-crimes-2017.arrow"
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>&#39;https://raw.githubusercontent.com/RandomFractals/ChicagoCrimes/master/data/chicago-crimes-2017.arrow&#39;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
async function loadData(dataUrl){
  const response = await fetch(dataUrl);
  return await response.arrayBuffer();
}
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
fetch(dataUrl)
    .then(res => {
        console.log(res.ok);
        console.log(res.status);
        console.log(res.statusText);
        console.log(res.headers.raw());
        console.log(res.headers.get('content-type'));
    });
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>true
200
OK
[Object: null prototype] {
  &#39;content-security-policy&#39;: [ &#34;default-src &#39;none&#39;; style-src &#39;unsafe-inline&#39;; sandbox&#34; ],
  &#39;strict-transport-security&#39;: [ &#39;max-age=31536000&#39; ],
  &#39;x-content-type-options&#39;: [ &#39;nosniff&#39; ],
  &#39;x-frame-options&#39;: [ &#39;deny&#39; ],
  &#39;x-xss-protection&#39;: [ &#39;1; mode=block&#39; ],
  etag:
   [ &#39;W/&#34;54801d6e8e8bce558eb964790a95105e16c4a597fef89e71c2edab21e18189a8&#34;&#39; ],
  &#39;content-type&#39;: [ &#39;application/octet-stream&#39; ],
  &#39;cache-control&#39;: [ &#39;max-age=300&#39; ],
  &#39;x-geo-block-list&#39;: [ &#39;&#39; ],
  &#39;x-github-request-id&#39;: [ &#39;9C90:1231:66FED:82564:5DC740BD&#39; ],
  &#39;content-length&#39;: [ &#39;3975450&#39; ],
  &#39;accept-ranges&#39;: [ &#39;bytes&#39; ],
  date: [ &#39;Sat, 09 Nov 2019 22:42:06 GMT&#39; ],
  via: [ &#39;1.1 varnish&#39; ],
  connection: [ &#39;close&#39; ],
  &#39;x-served-by&#39;: [ &#39;cache-hhn4067-HHN&#39; ],
  &#39;x-cache&#39;: [ &#39;MISS&#39; ],
  &#39;x-cache-hits&#39;: [ &#39;0&#39; ],
  &#39;x-timer&#39;: [ &#39;S1573339327.588676,VS0,VE208&#39; ],
  vary: [ &#39;Authorization,Accept-Encoding&#39; ],
  &#39;access-control-allow-origin&#39;: [ &#39;*&#39; ],
  &#39;x-fastly-request-id&#39;: [ &#39;5480e6580b4a34022333d56daef2d409d3fa8c4e&#39; ],
  expires: [ &#39;Sat, 09 Nov 2019 22:47:06 GMT&#39; ],
  &#39;source-age&#39;: [ &#39;0&#39; ] }
application/octet-stream
</pre>
</div>
</div>

</div>
</div>

</div>const getBuffer = async url => {
  try {
    const response = await fetch(url);
    return await response.arrayBuffer();
  } catch (error) {
    console.log(error);
  }
};
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
buf = loadData(dataUrl)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>in script 1
in script 2
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ArrayBuffer {
  [Uint8Contents]: &lt;41 52 52 4f 57 31 00 00 00 eb 02 00 00 10 00 00 00 0c 00 0e 00 06 00 05 00 08 00 00 00 0c 00 00 00 00 01 02 00 10 00 00 00 00 00 0a 00 0c 00 00 00 04 00 08 00 0a 00 00 00 90 01 00 00 04 00 00 00 01 00 00 00 0c 00 00 00 08 00 0c 00 04 00 08 00 08 00 00 00 08 00 00 00 10 00 00 00 06 00 00 00 70 61 6e ... 3975350 more bytes&gt;,
  byteLength: 3975450 }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
buf
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ArrayBuffer {
  [Uint8Contents]: &lt;41 52 52 4f 57 31 00 00 00 eb 02 00 00 10 00 00 00 0c 00 0e 00 06 00 05 00 08 00 00 00 0c 00 00 00 00 01 02 00 10 00 00 00 00 00 0a 00 0c 00 00 00 04 00 08 00 0a 00 00 00 90 01 00 00 04 00 00 00 01 00 00 00 0c 00 00 00 08 00 0c 00 04 00 08 00 08 00 00 00 08 00 00 00 10 00 00 00 06 00 00 00 70 61 6e ... 3975350 more bytes&gt;,
  byteLength: 3975450 }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
aze = {
    aze: 1,
    qsd: "aze"
}
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>{ aze: 1, qsd: &#39;aze&#39; }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript

```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
t0 = new arrow.Float64()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Float64 [Float] { precision: 2 }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
f0 = new arrow.Field('signal 0',
                     t0,
                     nullable=true,
                     metadata={label:'A simple label',
                               unit:"A label containing utf-8 character: µ"})
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Field {
  name: &#39;signal 0&#39;,
  type: Float64 [Float] { precision: 2 },
  nullable: true,
  metadata:
   { label: &#39;A simple label&#39;,
     unit: &#39;A label containing utf-8 character: µ&#39; } }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
function sayHello() {
    console.log("Hello, World!");
}
var t = setTimeout(sayHello, 1000);
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
LENGTH
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>2000</pre>
</div>

</div>

<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>Hello, World!
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
$$.async();

console.log("Hello, World!");

setTimeout($$.done, 1000);
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>Hello, World!
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
let LENGTH = 2000
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
$$.clear({})

fields = [
    {
        name: 'precipitation',
        type: { name: 'floatingpoint', precision: 'SINGLE'},
        nullable: false, children: []
    },
    {
        name: 'date',
        type: { name: 'date', unit: 'MILLISECOND' },
        nullable: false, children: []
    }
]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[ { name: &#39;precipitation&#39;,
    type: { name: &#39;floatingpoint&#39;, precision: &#39;SINGLE&#39; },
    nullable: false,
    children: [] },
  { name: &#39;date&#39;,
    type: { name: &#39;date&#39;, unit: &#39;MILLISECOND&#39; },
    nullable: false,
    children: [] } ]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## Manipulating Flat Arrays, Arrow-Style

https://observablehq.com/@lmeyerov/manipulating-flat-arrays-arrow-style
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
rainAmounts = Array.from({length: LENGTH},
                         () => Number((Math.random() * 20).toFixed(1)))
rainDates = Array.from({length: LENGTH},
                       (_, i) => Date.now() - 1000 * 60 * 60 * 24 * i)

rainfall = arrow.Table.from({
  schema: { fields: fields },
  batches: [{ 
    count: LENGTH,
    columns: [
      {name: "precipitation", count: LENGTH, VALIDITY: [], DATA: rainAmounts },
      {name: "date",          count: LENGTH, VALIDITY: [], DATA: rainDates }      
    ]
  }]
})
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Table {
  _nullCount: -1,
  _type: Struct { children: [ [Field], [Field] ] },
  _chunks:
   [ RecordBatch [StructVector&lt;Struct&gt;] {
       _children: undefined,
       numChildren: 2,
       data: [Data],
       _schema: [Schema] } ],
  _chunkOffsets: Uint32Array [ 0, 2000 ],
  _length: 2000,
  _numChildren: 2,
  _schema:
   Schema {
     fields: [ [Field], [Field] ],
     metadata: Map {},
     dictionaries: Map {} } }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
rainfall.count()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>2000</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
rainfall.get(10).toString()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>&#39;{ &#34;precipitation&#34;: 17.899999618530273, &#34;date&#34;: Wed Oct 30 2019 11:17:50 GMT+0000 (Coordinated Universal Time) }&#39;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript

tab = arrow.Table.from(new Uint8Array([1, 2, 4, 3]))
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Table {
  _nullCount: -1,
  _type: Struct { children: [] },
  _chunks:
   [ _InternalEmptyPlaceholderRecordBatch [StructVector&lt;Struct&gt;] {
       _children: undefined,
       numChildren: 0,
       data: [Data],
       _schema: [Schema] } ],
  _chunkOffsets: Uint32Array [ 0, 0 ],
  _length: 0,
  _numChildren: 0,
  _schema:
   Schema { fields: [], metadata: Map {}, dictionaries: Map {} } }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
tab
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Schema { fields: [], metadata: Map {}, dictionaries: Map {} }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
data = fetch(dataUrl)
  .then(res => {
    if (res.status >= 400) {
      throw new Error("Bad response from server");
    }
    return res.arrayBuffer();
  })
  .then(buffer => {
    return arrow.Table.from(new Uint8Array(buffer));
  })
  .catch(err => {
    console.error(err);
  });
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Table {
  _nullCount: -1,
  _type: Struct { children: [ [Field], [Field], [Field] ] },
  _chunks:
   [ RecordBatch [StructVector&lt;Struct&gt;] {
       _children: undefined,
       numChildren: 3,
       data: [Data],
       _schema: [Schema] } ],
  _chunkOffsets: Uint32Array [ 0, 165567 ],
  _length: 165567,
  _numChildren: 3,
  _schema:
   Schema {
     fields: [ [Field], [Field], [Field] ],
     metadata:
      Map {
        &#39;pandas&#39; =&gt; &#39;{&#34;index_columns&#34;: [&#34;Date&#34;], &#34;columns&#34;: [{&#34;numpy_type&#34;: &#34;float64&#34;, &#34;pandas_type&#34;: &#34;float64&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Latitude&#34;}, {&#34;numpy_type&#34;: &#34;float64&#34;, &#34;pandas_type&#34;: &#34;float64&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Longitude&#34;}, {&#34;numpy_type&#34;: &#34;datetime64[ns]&#34;, &#34;pandas_type&#34;: &#34;datetime&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Date&#34;}], &#34;pandas_version&#34;: &#34;0.20.3&#34;}&#39; },
     dictionaries: Map {} } }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
data
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Table {
  _nullCount: -1,
  _type: Struct { children: [ [Field], [Field], [Field] ] },
  _chunks:
   [ RecordBatch [StructVector&lt;Struct&gt;] {
       _children: undefined,
       numChildren: 3,
       data: [Data],
       _schema: [Schema] } ],
  _chunkOffsets: Uint32Array [ 0, 165567 ],
  _length: 165567,
  _numChildren: 3,
  _schema:
   Schema {
     fields: [ [Field], [Field], [Field] ],
     metadata:
      Map {
        &#39;pandas&#39; =&gt; &#39;{&#34;index_columns&#34;: [&#34;Date&#34;], &#34;columns&#34;: [{&#34;numpy_type&#34;: &#34;float64&#34;, &#34;pandas_type&#34;: &#34;float64&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Latitude&#34;}, {&#34;numpy_type&#34;: &#34;float64&#34;, &#34;pandas_type&#34;: &#34;float64&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Longitude&#34;}, {&#34;numpy_type&#34;: &#34;datetime64[ns]&#34;, &#34;pandas_type&#34;: &#34;datetime&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Date&#34;}], &#34;pandas_version&#34;: &#34;0.20.3&#34;}&#39; },
     dictionaries: Map {} } }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
crimes = loadData(dataUrl).then(buffer => arrow.Table.from(new Uint8Array(buffer)))

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>in script 1
in script 2
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Table {
  _nullCount: -1,
  _type: Struct { children: [ [Field], [Field], [Field] ] },
  _chunks:
   [ RecordBatch [StructVector&lt;Struct&gt;] {
       _children: undefined,
       numChildren: 3,
       data: [Data],
       _schema: [Schema] } ],
  _chunkOffsets: Uint32Array [ 0, 165567 ],
  _length: 165567,
  _numChildren: 3,
  _schema:
   Schema {
     fields: [ [Field], [Field], [Field] ],
     metadata:
      Map {
        &#39;pandas&#39; =&gt; &#39;{&#34;index_columns&#34;: [&#34;Date&#34;], &#34;columns&#34;: [{&#34;numpy_type&#34;: &#34;float64&#34;, &#34;pandas_type&#34;: &#34;float64&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Latitude&#34;}, {&#34;numpy_type&#34;: &#34;float64&#34;, &#34;pandas_type&#34;: &#34;float64&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Longitude&#34;}, {&#34;numpy_type&#34;: &#34;datetime64[ns]&#34;, &#34;pandas_type&#34;: &#34;datetime&#34;, &#34;metadata&#34;: null, &#34;name&#34;: &#34;Date&#34;}], &#34;pandas_version&#34;: &#34;0.20.3&#34;}&#39; },
     dictionaries: Map {} } }</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
rowCount = crimes.count()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
evalmachine.&lt;anonymous&gt;:1
rowCount = crimes.count()
                  ^

TypeError: crimes.count is not a function
    at evalmachine.&lt;anonymous&gt;:1:19
    at Script.runInThisContext (vm.js:124:20)
    at Object.runInThisContext (vm.js:314:38)
    at run ([eval]:1054:15)
    at onRunRequest ([eval]:888:18)
    at onMessage ([eval]:848:13)
    at process.emit (events.js:193:13)
    at emit (internal/child_process.js:848:12)
    at processTicksAndRejections (internal/process/task_queues.js:81:17)</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript
(new Array(1, 2)).map((elt, i) => elt)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[ 1, 2 ]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```javascript

```

</div>

</div>


