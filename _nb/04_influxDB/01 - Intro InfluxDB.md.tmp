<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
<h1><img src="https://3yecy51kdipx3blyi37oute1-wpengine.netdna-ssl.com/wp-content/uploads/2016/11/influxdata_400x200.png" style="height: 80px;"/></h1>

> InfluxDB is a time series database designed to handle timestamped data, including DevOps monitoring, application metrics, IoT sensor data, and real-time analytics.

## Key features

- CLI/HTTP write and query API.
- Expressive SQL-like query language
- Schemas don't have to be defined up front and schema preferences may change over time. 
- Tags allow series to be indexed for fast and efficient queries.
- Retention policies efficiently auto-expire stale data.
- Plugins support for other data ingestion protocols such as Graphite, collectd, and OpenTSDB.
- Continuous queries automatically compute aggregate data to make frequent queries more efficient.
- InfluxDB isn’t fully CRUD
- The open source edition of InfluxDB runs on a single node, high availability is only available in the InfluxDB Enterprise Edition.

## Data structure


Time series [key concepts](https://docs.influxdata.com/influxdb/v1.7/concepts/key_concepts/):
- `time` - a timestamp - is similar to a SQL primary key, 
- `tags`, zero to many key-values, contain any metadata about the value, **`tags` are indexed**
- at least one key-value `field set` (``field key` identifies the measured element while field value` are the measured value itself, e.g. “value=0.64”, or “temperature=21.2”). **fields` are not indexed**
    
It’s important to note that fields are not indexed. Queries that use field values as filters must scan all values that match the other conditions in the query. As a result, those queries are not performant relative to queries on tags. In general, fields should not contain commonly-queried metadata.

    
Further concepts:
- a `measurement` acts as a container for `tags`, `fields`, and the `time` column. Assimilable to a SQL table, where the primary index is always `time`. `tags` and `fields` are effectively columns in the table.
- a `series` is the collection of data that share the same retention policy, measurement, and tag set.
- a point represents a single data record that has four components: a measurement, tag set, field set, and a timestamp. A point is uniquely identified by its series and timestamp (similar to a row in a SQL database table)

<table>
<thead>
<tr>
<th align="left">Element</th>
<th align="left">Optional/Required</th>
<th align="left">Description</th>
<th align="left">Type<br>(See <a href="https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_reference/#data-types">data types</a> for more information.)</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left"><a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#measurement">Measurement</a></td>
<td align="left">Required</td>
<td align="left">The measurement name. InfluxDB accepts one measurement per point.</td>
<td align="left">String</td>
</tr>

<tr>
<td align="left"><a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#tag-set">Tag set</a></td>
<td align="left">Optional</td>
<td align="left">All tag key-value pairs for the point.</td>
<td align="left"><a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#tag-key">Tag keys</a> and <a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#tag-value">tag values</a> are both strings.</td>
</tr>

<tr>
<td align="left"><a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#field-set">Field set</a></td>
<td align="left">Required. Points must have at least one field.</td>
<td align="left">All field key-value pairs for the point.</td>
<td align="left"><a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#field-key">Field keys</a> are strings. <a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#field-value">Field values</a> can be floats, integers, strings, or Booleans.</td>
</tr>

<tr>
<td align="left"><a href="https://docs.influxdata.com/influxdb/v1.7/concepts/glossary/#timestamp">Timestamp</a></td>
<td align="left">Optional. InfluxDB uses the server’s local nanosecond timestamp in UTC if the timestamp is not included with the point.</td>
<td align="left">The timestamp for the data point. InfluxDB accepts one timestamp per point.</td>
<td align="left">Unix nanosecond timestamp. Specify alternative precisions with the <a href="https://docs.influxdata.com/influxdb/v1.7/tools/api/#write-http-endpoint">InfluxDB API</a>.</td>
</tr>
</tbody>
</table>


## Data type

<table>
<thead>
<tr>
<th align="left">Datatype</th>
<th align="left">Element(s)</th>
<th align="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">Float</td>
<td align="left">Field values</td>
<td align="left">IEEE-754 64-bit floating-point numbers. This is the default numerical type. Examples: <code>1</code>, <code>1.0</code>, <code>1.e+78</code>, <code>1.E+78</code>.</td>
</tr>

<tr>
<td align="left">Integer</td>
<td align="left">Field values</td>
<td align="left">Signed 64-bit integers (-9223372036854775808 to 9223372036854775807). Specify an integer with a trailing <code>i</code> on the number. Example: <code>1i</code>.</td>
</tr>

<tr>
<td align="left">String</td>
<td align="left">Measurements, tag keys, tag values, field keys, field values</td>
<td align="left">Length limit 64KB.</td>
</tr>

<tr>
<td align="left">Boolean</td>
<td align="left">Field values</td>
<td align="left">Stores TRUE or FALSE values.<br><br>TRUE write syntax:<code>[t, T, true, True, TRUE]</code>.<br><br>FALSE write syntax:<code>[f, F, false, False, FALSE]</code></td>
</tr>

<tr>
<td align="left">Timestamp</td>
<td align="left">Timestamps</td>
<td align="left">Unix nanosecond timestamp. Specify alternative precisions with the <a href="/influxdb/v1.7/tools/api/#write-http-endpoint">InfluxDB API</a>. The minimum valid timestamp is <code>-9223372036854775806</code> or <code>1677-09-21T00:12:43.145224194Z</code>. The maximum valid timestamp is <code>9223372036854775806</code> or <code>2262-04-11T23:47:16.854775806Z</code>.</td>
</tr>
</tbody>
</table>

Python module [documentation](https://influxdb-python.readthedocs.io/en/latest/index.html)


## Example

<div style="display:table;">
<div style="display:row;width=100%;">
<div style="display:table-cell;">
*census*:

<table>
<thead>
<tr>
<th>time</th>
<th><span title="Field key">butterflies</span></th>
<th><span title="Field key">honeybees</span></th>
<th><span title="Tag key">location</span></th>
<th><span title="Tag key">scientist</span></th>
</tr>
</thead>

<tbody>
<tr>
<td title="Timestamp">2015-08-18T00:00:00Z</td>
<td title="Field value">12</td>
<td title="Field value">23</td>
<td title="Tag value">1</td>
<td title="Tag value">langstroth</td>
</tr>

<tr>
<td>2015-08-18T00:00:00Z</td>
<td>1</td>
<td>30</td>
<td>1</td>
<td>perpetua</td>
</tr>

<tr>
<td>2015-08-18T00:06:00Z</td>
<td>11</td>
<td>28</td>
<td>1</td>
<td>langstroth</td>
</tr>

<tr>
<td>015-08-18T00:06:00Z</td>
<td>3</td>
<td>28</td>
<td>1</td>
<td>perpetua</td>
</tr>

<tr>
<td>2015-08-18T05:54:00Z</td>
<td>2</td>
<td>11</td>
<td>2</td>
<td>langstroth</td>
</tr>

<tr>
<td>2015-08-18T06:00:00Z</td>
<td>1</td>
<td>10</td>
<td>2</td>
<td>langstroth</td>
</tr>

<tr>
<td>2015-08-18T06:06:00Z</td>
<td>8</td>
<td>23</td>
<td>2</td>
<td>perpetua</td>
</tr>

<tr>
<td>2015-08-18T06:12:00Z</td>
<td>7</td>
<td>22</td>
<td>2</td>
<td>perpetua</td>
</tr>
</tbody>
</table>

</div>
    
<div style="display:table-cell;padding-left:5%;">

**8 field sets**

    butterflies = 12 honeybees = 23
    butterflies = 1 honeybees = 30
    butterflies = 11 honeybees = 28
    butterflies = 3 honeybees = 28
    butterflies = 2 honeybees = 11
    butterflies = 1 honeybees = 10
    butterflies = 8 honeybees = 23
    butterflies = 7 honeybees = 22


</div>
    
<div style="display:table-cell;padding-left:5%;">


**4 tag sets** (different combinations of all the tag key-value pairs)

    location = 1, scientist = langstroth
    location = 2, scientist = langstroth
    location = 1, scientist = perpetua
    location = 2, scientist = perpetua
</div>
</div>    
</div>

<table>
<thead>
<tr>
<th>Arbitrary series number</th>
<th>Retention policy</th>
<th>Measurement</th>
<th>Tag set</th>
</tr>
</thead>

<tbody>
<tr>
<td>series 1</td>
<td><code>autogen</code></td>
<td><code>census</code></td>
<td><code>location = 1</code>,<code>scientist = langstroth</code></td>
</tr>

<tr>
<td>series 2</td>
<td><code>autogen</code></td>
<td><code>census</code></td>
<td><code>location = 2</code>,<code>scientist = langstroth</code></td>
</tr>

<tr>
<td>series 3</td>
<td><code>autogen</code></td>
<td><code>census</code></td>
<td><code>location = 1</code>,<code>scientist = perpetua</code></td>
</tr>

<tr>
<td>series 4</td>
<td><code>autogen</code></td>
<td><code>census</code></td>
<td><code>location = 2</code>,<code>scientist = perpetua</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from datetime import (datetime, timedelta)
from random import (choice, randint, random, uniform, lognormvariate)
from influxdb import (InfluxDBClient, DataFrameClient)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
INFLUXDB_USER='telegraf'
INFLUXDB_USER_PASSWORD='secretpassword'

host='db.influxdb.app.com'
port=8086
"""Instantiate a connection to the InfluxDB."""
user = 'admin'
password = 'supersecretpassword'
dbname = 'example'

dbuser = 'telegraf'
dbuser_password = 'secretpassword'

client = InfluxDBClient(host, port, user, password, dbname)
```

</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# DB init
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
For creating the DB
</div>
</div>
</div>client.create_database(dbname)
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Define a specific retention policy, drop after 30d, with replica factor of 3 and applied by default to new elements
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
client.create_retention_policy('custom_policy', '30d', 3, default=True)
```

</div>

</div># For dropping the policy:
client.drop_retention_policy('custom_policy', dbname)
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
client.switch_user(dbuser, dbuser_password)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
def feed_db(n):
    json_body = [
        {
            "measurement": "starfleet_01",
            "tags": {
                "cmdt": choice(("Archer", "Kirk", "Kruge")),
                "region": choice(("Andoria", "Deep Space Nine", "Earth", "Genesis")),
                "spacecraft": f"NX-17{randint(1, 10):02d}"
            },
            "time": (datetime.now() - timedelta(seconds=2*(n - i))).strftime("%Y-%m-%dT%H:%M:%S"),
            "fields": {
                "speed": lognormvariate(10, 3),
                "consumption": uniform(0, 300),
                "pressure_a": 3 + random(),
                "status_b": choice((True, False))
            }
        } for i in range(n)
    ]
    client.write_points(json_body, batch_size=100_000)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
def feed_db_array(n):
    json_body = [
        {
            "measurement": "starfleet_02",
            "tags": {
                "cmdt": choice(("Archer", "Kirk", "Kruge")),
                "region": choice(("Andoria", "Deep Space Nine", "Earth", "Genesis")),
                "spacecraft": f"NX-17{randint(1, 10):02d}"
            },
            "time": (datetime.now() - timedelta(seconds=2*(n - i))).strftime("%Y-%m-%dT%H:%M:%S"),
            "fields": {
                "curve_b[0]": 10 + random(),
                "curve_b[1]": choice((15 + random(), 4 + random())),
                "curve_b[2]": 20 + random(),
            }
        } for i in range(n)
    ]
    client.write_points(json_body, batch_size=100_000)
    

```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%timeit feed_db(100_000)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>13.2 s ± 202 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>feed_db_array(1_000_000)
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Series can be deleted
</div>
</div>
</div>client.delete_series(database="example", measurement="starfleet_01")
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
client.query(query='select count(*) from starfleet_01')
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;starfleet_01&#39;, None)&#39;: [{&#39;time&#39;: &#39;1970-01-01T00:00:00Z&#39;, &#39;count_consumption&#39;: 1866653, &#39;count_pressure_a&#39;: 1866653, &#39;count_speed&#39;: 1866653, &#39;count_status_b&#39;: 1866653}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from IPython.core.magic import (register_line_cell_magic)

@register_line_cell_magic
def influxql(line, cell=None):
    "Magic that works both as %lcmagic and as %%lcmagic"
    if cell is None:
        sqlstr = line
    else:
        sqlstr = ";".join((op.strip(";") for op in cell.strip("\n").split("\n"))) + ";"
    return client.query(query=sqlstr)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql SELECT speed FROM starfleet_01 WHERE time > now() - 1d LIMIT 10;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;starfleet_01&#39;, None)&#39;: [{&#39;time&#39;: &#39;2019-08-19T20:52:05Z&#39;, &#39;speed&#39;: 774750.9698706511}, {&#39;time&#39;: &#39;2019-08-19T20:52:07Z&#39;, &#39;speed&#39;: 487121.20016297186}, {&#39;time&#39;: &#39;2019-08-19T20:52:09Z&#39;, &#39;speed&#39;: 18753.305850476325}, {&#39;time&#39;: &#39;2019-08-19T20:52:11Z&#39;, &#39;speed&#39;: 17151.44033960194}, {&#39;time&#39;: &#39;2019-08-19T20:52:13Z&#39;, &#39;speed&#39;: 34535.68231005546}, {&#39;time&#39;: &#39;2019-08-19T20:52:15Z&#39;, &#39;speed&#39;: 17274.816825933573}, {&#39;time&#39;: &#39;2019-08-19T20:52:17Z&#39;, &#39;speed&#39;: 31681.839234807274}, {&#39;time&#39;: &#39;2019-08-19T20:52:19Z&#39;, &#39;speed&#39;: 9354.756781762246}, {&#39;time&#39;: &#39;2019-08-19T20:52:21Z&#39;, &#39;speed&#39;: 6355.474730264167}, {&#39;time&#39;: &#39;2019-08-19T20:52:23Z&#39;, &#39;speed&#39;: 40375.16829113543}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
result = %influxql SELECT speed FROM starfleet_01 WHERE time > now() - 1d LIMIT 10;
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
result
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;starfleet_01&#39;, None)&#39;: [{&#39;time&#39;: &#39;2019-08-19T20:52:07Z&#39;, &#39;speed&#39;: 487121.20016297186}, {&#39;time&#39;: &#39;2019-08-19T20:52:09Z&#39;, &#39;speed&#39;: 18753.305850476325}, {&#39;time&#39;: &#39;2019-08-19T20:52:11Z&#39;, &#39;speed&#39;: 17151.44033960194}, {&#39;time&#39;: &#39;2019-08-19T20:52:13Z&#39;, &#39;speed&#39;: 34535.68231005546}, {&#39;time&#39;: &#39;2019-08-19T20:52:15Z&#39;, &#39;speed&#39;: 17274.816825933573}, {&#39;time&#39;: &#39;2019-08-19T20:52:17Z&#39;, &#39;speed&#39;: 31681.839234807274}, {&#39;time&#39;: &#39;2019-08-19T20:52:19Z&#39;, &#39;speed&#39;: 9354.756781762246}, {&#39;time&#39;: &#39;2019-08-19T20:52:21Z&#39;, &#39;speed&#39;: 6355.474730264167}, {&#39;time&#39;: &#39;2019-08-19T20:52:23Z&#39;, &#39;speed&#39;: 40375.16829113543}, {&#39;time&#39;: &#39;2019-08-19T20:52:25Z&#39;, &#39;speed&#39;: 9.829304084029904}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql SELECT COUNT(DISTINCT(pressure_a)) FROM starfleet_01;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;starfleet_01&#39;, None)&#39;: [{&#39;time&#39;: &#39;1970-01-01T00:00:00Z&#39;, &#39;count&#39;: 1000000}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql SELECT COUNT(pressure_a) FROM starfleet_01 GROUP BY time(28d), region LIMIT 1;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Andoria&#39;})&#39;: [{&#39;time&#39;: &#39;2019-07-11T00:00:00Z&#39;, &#39;count&#39;: 118099}], &#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Deep Space Nine&#39;})&#39;: [{&#39;time&#39;: &#39;2019-07-11T00:00:00Z&#39;, &#39;count&#39;: 118282}], &#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Earth&#39;})&#39;: [{&#39;time&#39;: &#39;2019-07-11T00:00:00Z&#39;, &#39;count&#39;: 117988}], &#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Genesis&#39;})&#39;: [{&#39;time&#39;: &#39;2019-07-11T00:00:00Z&#39;, &#39;count&#39;: 117959}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql SELECT MEAN(pressure_a) FROM starfleet_01 GROUP BY region
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Andoria&#39;})&#39;: [{&#39;time&#39;: &#39;1970-01-01T00:00:00Z&#39;, &#39;mean&#39;: 3.499534039730786}], &#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Deep Space Nine&#39;})&#39;: [{&#39;time&#39;: &#39;1970-01-01T00:00:00Z&#39;, &#39;mean&#39;: 3.4999780335201867}], &#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Earth&#39;})&#39;: [{&#39;time&#39;: &#39;1970-01-01T00:00:00Z&#39;, &#39;mean&#39;: 3.5005520567253616}], &#39;(&#39;starfleet_01&#39;, {&#39;region&#39;: &#39;Genesis&#39;})&#39;: [{&#39;time&#39;: &#39;1970-01-01T00:00:00Z&#39;, &#39;mean&#39;: 3.5013387093463155}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
You can explain query
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql EXPLAIN SELECT * FROM starfleet_02 WHERE region = 'Andoria' LIMIT 1
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;results&#39;, None)&#39;: [{&#39;QUERY PLAN&#39;: &#39;EXPRESSION: &lt;nil&gt;&#39;}, {&#39;QUERY PLAN&#39;: &#39;AUXILIARY FIELDS: cmdt::tag, &#34;curve_b[0]&#34;::float, &#34;curve_b[1]&#34;::float, &#34;curve_b[2]&#34;::float, region::tag, spacecraft::tag&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF SHARDS: 25&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF SERIES: 750&#39;}, {&#39;QUERY PLAN&#39;: &#39;CACHED VALUES: 0&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF FILES: 2160&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF BLOCKS: 2160&#39;}, {&#39;QUERY PLAN&#39;: &#39;SIZE OF BLOCKS: 5992395&#39;}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql EXPLAIN SELECT * FROM starfleet_02 WHERE pressure_a > 3.5 LIMIT 1
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;results&#39;, None)&#39;: [{&#39;QUERY PLAN&#39;: &#39;EXPRESSION: &lt;nil&gt;&#39;}, {&#39;QUERY PLAN&#39;: &#39;AUXILIARY FIELDS: cmdt::tag, &#34;curve_b[0]&#34;::float, &#34;curve_b[1]&#34;::float, &#34;curve_b[2]&#34;::float, region::tag, spacecraft::tag&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF SHARDS: 25&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF SERIES: 3000&#39;}, {&#39;QUERY PLAN&#39;: &#39;CACHED VALUES: 0&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF FILES: 8640&#39;}, {&#39;QUERY PLAN&#39;: &#39;NUMBER OF BLOCKS: 8640&#39;}, {&#39;QUERY PLAN&#39;: &#39;SIZE OF BLOCKS: 23943525&#39;}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
res = %influxql SELECT * FROM "starfleet_01" WHERE pressure_a > 3.5 LIMIT 50
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
points = res.get_points(tags={"region": "Andoria"})
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from pandas import DataFrame
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
df = DataFrame(points)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
df.head()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmdt</th>
      <th>consumption</th>
      <th>pressure_a</th>
      <th>region</th>
      <th>spacecraft</th>
      <th>speed</th>
      <th>status_b</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Archer</td>
      <td>80.868742</td>
      <td>3.764769</td>
      <td>Andoria</td>
      <td>NX-1707</td>
      <td>4.540769e+06</td>
      <td>False</td>
      <td>2019-07-28T01:35:50Z</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Archer</td>
      <td>64.351610</td>
      <td>3.784118</td>
      <td>Andoria</td>
      <td>NX-1707</td>
      <td>8.549125e+05</td>
      <td>False</td>
      <td>2019-07-28T01:36:00Z</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Archer</td>
      <td>60.765559</td>
      <td>3.907481</td>
      <td>Andoria</td>
      <td>NX-1702</td>
      <td>1.679463e+05</td>
      <td>False</td>
      <td>2019-07-28T01:36:04Z</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Archer</td>
      <td>252.870551</td>
      <td>3.800938</td>
      <td>Andoria</td>
      <td>NX-1706</td>
      <td>1.444727e+04</td>
      <td>True</td>
      <td>2019-07-28T01:36:06Z</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Kruge</td>
      <td>192.871755</td>
      <td>3.930994</td>
      <td>Andoria</td>
      <td>NX-1702</td>
      <td>4.376490e+03</td>
      <td>False</td>
      <td>2019-07-28T01:36:08Z</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
df.groupby('spacecraft').max()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmdt</th>
      <th>consumption</th>
      <th>pressure_a</th>
      <th>region</th>
      <th>speed</th>
      <th>status_b</th>
      <th>time</th>
    </tr>
    <tr>
      <th>spacecraft</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>NX-1701</th>
      <td>Kirk</td>
      <td>226.626952</td>
      <td>3.518973</td>
      <td>Andoria</td>
      <td>6.987498e+05</td>
      <td>False</td>
      <td>2019-07-28T01:38:44Z</td>
    </tr>
    <tr>
      <th>NX-1702</th>
      <td>Kruge</td>
      <td>217.135955</td>
      <td>3.952388</td>
      <td>Andoria</td>
      <td>6.735246e+05</td>
      <td>True</td>
      <td>2019-07-28T01:37:38Z</td>
    </tr>
    <tr>
      <th>NX-1704</th>
      <td>Kruge</td>
      <td>278.172741</td>
      <td>3.976138</td>
      <td>Andoria</td>
      <td>2.770339e+01</td>
      <td>True</td>
      <td>2019-07-28T01:37:54Z</td>
    </tr>
    <tr>
      <th>NX-1705</th>
      <td>Kirk</td>
      <td>197.423732</td>
      <td>3.964069</td>
      <td>Andoria</td>
      <td>4.300635e+04</td>
      <td>True</td>
      <td>2019-07-28T01:37:42Z</td>
    </tr>
    <tr>
      <th>NX-1706</th>
      <td>Kruge</td>
      <td>252.870551</td>
      <td>3.800938</td>
      <td>Andoria</td>
      <td>1.444727e+04</td>
      <td>True</td>
      <td>2019-07-28T01:37:02Z</td>
    </tr>
    <tr>
      <th>NX-1707</th>
      <td>Kruge</td>
      <td>289.899273</td>
      <td>3.913948</td>
      <td>Andoria</td>
      <td>4.540769e+06</td>
      <td>True</td>
      <td>2019-07-28T01:38:46Z</td>
    </tr>
    <tr>
      <th>NX-1709</th>
      <td>Kruge</td>
      <td>272.085362</td>
      <td>3.734222</td>
      <td>Andoria</td>
      <td>1.653500e+05</td>
      <td>True</td>
      <td>2019-07-28T01:37:30Z</td>
    </tr>
    <tr>
      <th>NX-1710</th>
      <td>Kruge</td>
      <td>297.309907</td>
      <td>3.875039</td>
      <td>Andoria</td>
      <td>5.887814e+04</td>
      <td>True</td>
      <td>2019-07-28T01:38:20Z</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql SHOW QUERIES;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;results&#39;, None)&#39;: [{&#39;qid&#39;: 2821, &#39;query&#39;: &#39;SHOW QUERIES&#39;, &#39;database&#39;: &#39;example&#39;, &#39;duration&#39;: &#39;171µs&#39;, &#39;status&#39;: &#39;running&#39;}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%influxql SHOW TAG KEYS;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>ResultSet({&#39;(&#39;starfleet_01&#39;, None)&#39;: [{&#39;tagKey&#39;: &#39;cmdt&#39;}, {&#39;tagKey&#39;: &#39;region&#39;}, {&#39;tagKey&#39;: &#39;spacecraft&#39;}], &#39;(&#39;starfleet_02&#39;, None)&#39;: [{&#39;tagKey&#39;: &#39;cmdt&#39;}, {&#39;tagKey&#39;: &#39;region&#39;}, {&#39;tagKey&#39;: &#39;spacecraft&#39;}]})</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python

```

</div>

</div>


