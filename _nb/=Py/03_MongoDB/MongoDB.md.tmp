<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%load_ext watermark
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%watermark -dvmp pymongo,pyarrow
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>2019-11-02 

CPython 3.7.3
IPython 7.8.0

pymongo 3.8.0
pyarrow not installed

compiler   : GCC 7.3.0
system     : Linux
release    : 5.0.0-31-generic
machine    : x86_64
processor  : x86_64
CPU cores  : 8
interpreter: 64bit
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from pymongo import MongoClient
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
mongo_local = dict(
    user='root',
    password='secret',
    port=27017,
    host='172.22.0.3',
    database="starwars",
    collection="people"    
)

mongo_atlas = dict(
    user='m220student',
    password='m220password',
    port=27017,
    host='baobab-crx55.mongodb.net'
)               
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import datetime
post = {"author": "Mike",
    "text": "My first blog post!",
    "tags": ["mongodb", "python", "pymongo"],
    "date": datetime.datetime.utcnow()}
```

</div>

</div>uri = f"mongodb://{user}:{password}@{host}"
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
conn = mongo_local

uri = f"mongodb://{conn['user']}:{conn['password']}@{conn['host']}:{conn.get('port', 27017)}"
print(uri)
database = "starwars"
collection = "people"

client = MongoClient(uri)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>mongodb://root:secret@172.22.0.3:27017
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
"mongodb://root:secret@172.22.0.3:27017/starwars".rsplit("/", maxsplit=1)[0]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>&#39;mongodb://root:secret@172.22.0.3:27017&#39;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
m = MongoClient("mongodb://mongo:password@mongo").list_database_names()
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
m.list_database_names()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">OperationFailure</span>                          Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-71-a100b7e4b26f&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>m<span class="ansi-blue-fg">.</span>list_database_names<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/mongo_client.py</span> in <span class="ansi-cyan-fg">list_database_names</span><span class="ansi-blue-fg">(self, session)</span>
<span class="ansi-green-intense-fg ansi-bold">   1697</span>         &#34;&#34;&#34;
<span class="ansi-green-intense-fg ansi-bold">   1698</span>         return [doc[&#34;name&#34;]
<span class="ansi-green-fg">-&gt; 1699</span><span class="ansi-red-fg">                 for doc in self.list_databases(session, nameOnly=True)]
</span><span class="ansi-green-intense-fg ansi-bold">   1700</span> 
<span class="ansi-green-intense-fg ansi-bold">   1701</span>     <span class="ansi-green-fg">def</span> database_names<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> session<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/mongo_client.py</span> in <span class="ansi-cyan-fg">list_databases</span><span class="ansi-blue-fg">(self, session, **kwargs)</span>
<span class="ansi-green-intense-fg ansi-bold">   1678</span>         cmd<span class="ansi-blue-fg">.</span>update<span class="ansi-blue-fg">(</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1679</span>         admin <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>_database_default_options<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">&#34;admin&#34;</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">-&gt; 1680</span><span class="ansi-red-fg">         </span>res <span class="ansi-blue-fg">=</span> admin<span class="ansi-blue-fg">.</span>command<span class="ansi-blue-fg">(</span>cmd<span class="ansi-blue-fg">,</span> session<span class="ansi-blue-fg">=</span>session<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1681</span>         <span class="ansi-red-fg"># listDatabases doesn&#39;t return a cursor (yet). Fake one.</span>
<span class="ansi-green-intense-fg ansi-bold">   1682</span>         cursor = {

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/database.py</span> in <span class="ansi-cyan-fg">command</span><span class="ansi-blue-fg">(self, command, value, check, allowable_errors, read_preference, codec_options, session, **kwargs)</span>
<span class="ansi-green-intense-fg ansi-bold">    653</span>                                or ReadPreference.PRIMARY)
<span class="ansi-green-intense-fg ansi-bold">    654</span>         with self.__client._socket_for_reads(
<span class="ansi-green-fg">--&gt; 655</span><span class="ansi-red-fg">                 read_preference) as (sock_info, slave_ok):
</span><span class="ansi-green-intense-fg ansi-bold">    656</span>             return self._command(sock_info, command, slave_ok, value,
<span class="ansi-green-intense-fg ansi-bold">    657</span>                                  check<span class="ansi-blue-fg">,</span> allowable_errors<span class="ansi-blue-fg">,</span> read_preference<span class="ansi-blue-fg">,</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/contextlib.py</span> in <span class="ansi-cyan-fg">__enter__</span><span class="ansi-blue-fg">(self)</span>
<span class="ansi-green-intense-fg ansi-bold">    110</span>         <span class="ansi-green-fg">del</span> self<span class="ansi-blue-fg">.</span>args<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>kwds<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>func
<span class="ansi-green-intense-fg ansi-bold">    111</span>         <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 112</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> next<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>gen<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    113</span>         <span class="ansi-green-fg">except</span> StopIteration<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    114</span>             <span class="ansi-green-fg">raise</span> RuntimeError<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">&#34;generator didn&#39;t yield&#34;</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">from</span> <span class="ansi-green-fg">None</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/mongo_client.py</span> in <span class="ansi-cyan-fg">_socket_for_reads</span><span class="ansi-blue-fg">(self, read_preference)</span>
<span class="ansi-green-intense-fg ansi-bold">   1135</span>         server <span class="ansi-blue-fg">=</span> topology<span class="ansi-blue-fg">.</span>select_server<span class="ansi-blue-fg">(</span>read_preference<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1136</span> 
<span class="ansi-green-fg">-&gt; 1137</span><span class="ansi-red-fg">         </span><span class="ansi-green-fg">with</span> self<span class="ansi-blue-fg">.</span>_get_socket<span class="ansi-blue-fg">(</span>server<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">as</span> sock_info<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1138</span>             slave_ok = (single and not sock_info.is_mongos) or (
<span class="ansi-green-intense-fg ansi-bold">   1139</span>                 read_preference != ReadPreference.PRIMARY)

<span class="ansi-green-fg">/opt/conda/lib/python3.7/contextlib.py</span> in <span class="ansi-cyan-fg">__enter__</span><span class="ansi-blue-fg">(self)</span>
<span class="ansi-green-intense-fg ansi-bold">    110</span>         <span class="ansi-green-fg">del</span> self<span class="ansi-blue-fg">.</span>args<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>kwds<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>func
<span class="ansi-green-intense-fg ansi-bold">    111</span>         <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 112</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> next<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>gen<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    113</span>         <span class="ansi-green-fg">except</span> StopIteration<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    114</span>             <span class="ansi-green-fg">raise</span> RuntimeError<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">&#34;generator didn&#39;t yield&#34;</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">from</span> <span class="ansi-green-fg">None</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/mongo_client.py</span> in <span class="ansi-cyan-fg">_get_socket</span><span class="ansi-blue-fg">(self, server)</span>
<span class="ansi-green-intense-fg ansi-bold">   1092</span>     <span class="ansi-green-fg">def</span> _get_socket<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> server<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1093</span>         <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">-&gt; 1094</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">with</span> server<span class="ansi-blue-fg">.</span>get_socket<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>__all_credentials<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">as</span> sock_info<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1095</span>                 <span class="ansi-green-fg">yield</span> sock_info
<span class="ansi-green-intense-fg ansi-bold">   1096</span>         <span class="ansi-green-fg">except</span> NetworkTimeout<span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/contextlib.py</span> in <span class="ansi-cyan-fg">__enter__</span><span class="ansi-blue-fg">(self)</span>
<span class="ansi-green-intense-fg ansi-bold">    110</span>         <span class="ansi-green-fg">del</span> self<span class="ansi-blue-fg">.</span>args<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>kwds<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>func
<span class="ansi-green-intense-fg ansi-bold">    111</span>         <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 112</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> next<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>gen<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    113</span>         <span class="ansi-green-fg">except</span> StopIteration<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    114</span>             <span class="ansi-green-fg">raise</span> RuntimeError<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">&#34;generator didn&#39;t yield&#34;</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">from</span> <span class="ansi-green-fg">None</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/pool.py</span> in <span class="ansi-cyan-fg">get_socket</span><span class="ansi-blue-fg">(self, all_credentials, checkout)</span>
<span class="ansi-green-intense-fg ansi-bold">   1009</span>         sock_info <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>_get_socket_no_auth<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1010</span>         <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">-&gt; 1011</span><span class="ansi-red-fg">             </span>sock_info<span class="ansi-blue-fg">.</span>check_auth<span class="ansi-blue-fg">(</span>all_credentials<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1012</span>             <span class="ansi-green-fg">yield</span> sock_info
<span class="ansi-green-intense-fg ansi-bold">   1013</span>         <span class="ansi-green-fg">except</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/pool.py</span> in <span class="ansi-cyan-fg">check_auth</span><span class="ansi-blue-fg">(self, all_credentials)</span>
<span class="ansi-green-intense-fg ansi-bold">    680</span> 
<span class="ansi-green-intense-fg ansi-bold">    681</span>             <span class="ansi-green-fg">for</span> credentials <span class="ansi-green-fg">in</span> cached <span class="ansi-blue-fg">-</span> authset<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 682</span><span class="ansi-red-fg">                 </span>auth<span class="ansi-blue-fg">.</span>authenticate<span class="ansi-blue-fg">(</span>credentials<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    683</span>                 self<span class="ansi-blue-fg">.</span>authset<span class="ansi-blue-fg">.</span>add<span class="ansi-blue-fg">(</span>credentials<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    684</span> 

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/auth.py</span> in <span class="ansi-cyan-fg">authenticate</span><span class="ansi-blue-fg">(credentials, sock_info)</span>
<span class="ansi-green-intense-fg ansi-bold">    563</span>     mechanism <span class="ansi-blue-fg">=</span> credentials<span class="ansi-blue-fg">.</span>mechanism
<span class="ansi-green-intense-fg ansi-bold">    564</span>     auth_func <span class="ansi-blue-fg">=</span> _AUTH_MAP<span class="ansi-blue-fg">.</span>get<span class="ansi-blue-fg">(</span>mechanism<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">--&gt; 565</span><span class="ansi-red-fg">     </span>auth_func<span class="ansi-blue-fg">(</span>credentials<span class="ansi-blue-fg">,</span> sock_info<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    566</span> 
<span class="ansi-green-intense-fg ansi-bold">    567</span> 

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/auth.py</span> in <span class="ansi-cyan-fg">_authenticate_default</span><span class="ansi-blue-fg">(credentials, sock_info)</span>
<span class="ansi-green-intense-fg ansi-bold">    538</span>             <span class="ansi-green-fg">return</span> _authenticate_scram<span class="ansi-blue-fg">(</span>credentials<span class="ansi-blue-fg">,</span> sock_info<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">&#39;SCRAM-SHA-256&#39;</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    539</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 540</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> _authenticate_scram<span class="ansi-blue-fg">(</span>credentials<span class="ansi-blue-fg">,</span> sock_info<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">&#39;SCRAM-SHA-1&#39;</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    541</span>     <span class="ansi-green-fg">elif</span> sock_info<span class="ansi-blue-fg">.</span>max_wire_version <span class="ansi-blue-fg">&gt;=</span> <span class="ansi-cyan-fg">3</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    542</span>         <span class="ansi-green-fg">return</span> _authenticate_scram<span class="ansi-blue-fg">(</span>credentials<span class="ansi-blue-fg">,</span> sock_info<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">&#39;SCRAM-SHA-1&#39;</span><span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/auth.py</span> in <span class="ansi-cyan-fg">_authenticate_scram</span><span class="ansi-blue-fg">(credentials, sock_info, mechanism)</span>
<span class="ansi-green-intense-fg ansi-bold">    262</span>                <span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">&#39;payload&#39;</span><span class="ansi-blue-fg">,</span> Binary<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">b&#34;n,,&#34;</span> <span class="ansi-blue-fg">+</span> first_bare<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span>
<span class="ansi-green-intense-fg ansi-bold">    263</span>                (&#39;autoAuthorize&#39;, 1)])
<span class="ansi-green-fg">--&gt; 264</span><span class="ansi-red-fg">     </span>res <span class="ansi-blue-fg">=</span> sock_info<span class="ansi-blue-fg">.</span>command<span class="ansi-blue-fg">(</span>source<span class="ansi-blue-fg">,</span> cmd<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    265</span> 
<span class="ansi-green-intense-fg ansi-bold">    266</span>     server_first <span class="ansi-blue-fg">=</span> res<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">&#39;payload&#39;</span><span class="ansi-blue-fg">]</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/pool.py</span> in <span class="ansi-cyan-fg">command</span><span class="ansi-blue-fg">(self, dbname, spec, slave_ok, read_preference, codec_options, check, allowable_errors, check_keys, read_concern, write_concern, parse_write_concern_error, collation, session, client, retryable_write, publish_events, user_fields)</span>
<span class="ansi-green-intense-fg ansi-bold">    582</span>                            use_op_msg<span class="ansi-blue-fg">=</span>self<span class="ansi-blue-fg">.</span>op_msg_enabled<span class="ansi-blue-fg">,</span>
<span class="ansi-green-intense-fg ansi-bold">    583</span>                            unacknowledged<span class="ansi-blue-fg">=</span>unacknowledged<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg">--&gt; 584</span><span class="ansi-red-fg">                            user_fields=user_fields)
</span><span class="ansi-green-intense-fg ansi-bold">    585</span>         <span class="ansi-green-fg">except</span> OperationFailure<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    586</span>             <span class="ansi-green-fg">raise</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/network.py</span> in <span class="ansi-cyan-fg">command</span><span class="ansi-blue-fg">(sock, dbname, spec, slave_ok, is_mongos, read_preference, codec_options, session, client, check, allowable_errors, address, check_keys, listeners, max_bson_size, read_concern, parse_write_concern_error, collation, compression_ctx, use_op_msg, unacknowledged, user_fields)</span>
<span class="ansi-green-intense-fg ansi-bold">    156</span>                 helpers._check_command_response(
<span class="ansi-green-intense-fg ansi-bold">    157</span>                     response_doc<span class="ansi-blue-fg">,</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> allowable_errors<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg">--&gt; 158</span><span class="ansi-red-fg">                     parse_write_concern_error=parse_write_concern_error)
</span><span class="ansi-green-intense-fg ansi-bold">    159</span>     <span class="ansi-green-fg">except</span> Exception <span class="ansi-green-fg">as</span> exc<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    160</span>         <span class="ansi-green-fg">if</span> publish<span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pymongo/helpers.py</span> in <span class="ansi-cyan-fg">_check_command_response</span><span class="ansi-blue-fg">(response, msg, allowable_errors, parse_write_concern_error)</span>
<span class="ansi-green-intense-fg ansi-bold">    153</span> 
<span class="ansi-green-intense-fg ansi-bold">    154</span>             msg <span class="ansi-blue-fg">=</span> msg <span class="ansi-green-fg">or</span> <span class="ansi-blue-fg">&#34;%s&#34;</span>
<span class="ansi-green-fg">--&gt; 155</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">raise</span> OperationFailure<span class="ansi-blue-fg">(</span>msg <span class="ansi-blue-fg">%</span> errmsg<span class="ansi-blue-fg">,</span> code<span class="ansi-blue-fg">,</span> response<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    156</span> 
<span class="ansi-green-intense-fg ansi-bold">    157</span> 

<span class="ansi-red-fg">OperationFailure</span>: Authentication failed.</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
"mongodb://root:secret@172.22.0.3:27017/starwars".split
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>&lt;function str.split(sep=None, maxsplit=-1)&gt;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
aze = MongoClient("mongodb://root:secret@172.22.0.3:27017")
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
aze.list_database_names()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[&#39;admin&#39;,
 &#39;config&#39;,
 &#39;local&#39;,
 &#39;people-bson&#39;,
 &#39;saildrone&#39;,
 &#39;sc&#39;,
 &#39;starwars&#39;,
 &#39;test&#39;]</pre>
</div>

</div>

</div>
</div>

</div>aze.get_database('starwars').get_collection('people').find_one()
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%store uri
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>Stored &#39;uri&#39; (str)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
client.list_database_names()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[&#39;admin&#39;,
 &#39;config&#39;,
 &#39;local&#39;,
 &#39;people-bson&#39;,
 &#39;saildrone&#39;,
 &#39;sc&#39;,
 &#39;starwars&#39;,
 &#39;test&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
res = client.get_database('starwars').get_collection('people')
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
res.find_one()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>{&#39;_id&#39;: ObjectId(&#39;5d31e79f5decab6c5ac11358&#39;),
 &#39;name&#39;: &#39;Luke Skywalker&#39;,
 &#39;height&#39;: 172,
 &#39;mass&#39;: 77,
 &#39;hair_color&#39;: &#39;blond&#39;,
 &#39;skin_color&#39;: &#39;fair&#39;,
 &#39;eye_color&#39;: &#39;blue&#39;,
 &#39;birth_year&#39;: &#39;19BBY&#39;,
 &#39;gender&#39;: &#39;male&#39;,
 &#39;homeworld&#39;: {&#39;name&#39;: &#39;Tatooine&#39;,
  &#39;rotation_period&#39;: 23,
  &#39;orbital_period&#39;: 304,
  &#39;diameter&#39;: 10465,
  &#39;climate&#39;: &#39;arid&#39;,
  &#39;gravity&#39;: &#39;1 standard&#39;,
  &#39;terrain&#39;: &#39;desert&#39;,
  &#39;surface_water&#39;: 1,
  &#39;population&#39;: 200000,
  &#39;residents&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
   &#39;https://swapi.co/api/people/2/&#39;,
   &#39;https://swapi.co/api/people/4/&#39;,
   &#39;https://swapi.co/api/people/6/&#39;,
   &#39;https://swapi.co/api/people/7/&#39;,
   &#39;https://swapi.co/api/people/8/&#39;,
   &#39;https://swapi.co/api/people/9/&#39;,
   &#39;https://swapi.co/api/people/11/&#39;,
   &#39;https://swapi.co/api/people/43/&#39;,
   &#39;https://swapi.co/api/people/62/&#39;],
  &#39;films&#39;: [&#39;https://swapi.co/api/films/5/&#39;,
   &#39;https://swapi.co/api/films/4/&#39;,
   &#39;https://swapi.co/api/films/6/&#39;,
   &#39;https://swapi.co/api/films/3/&#39;,
   &#39;https://swapi.co/api/films/1/&#39;],
  &#39;created&#39;: &#39;2014-12-09T13:50:49.641000Z&#39;,
  &#39;edited&#39;: &#39;2014-12-21T20:48:04.175778Z&#39;,
  &#39;url&#39;: &#39;https://swapi.co/api/planets/1/&#39;},
 &#39;films&#39;: [{&#39;title&#39;: &#39;The Empire Strikes Back&#39;,
   &#39;episode_id&#39;: 5,
   &#39;opening_crawl&#39;: &#39;It is a dark time for the\r\nRebellion. Although the Death\r\nStar has been destroyed,\r\nImperial troops have driven the\r\nRebel forces from their hidden\r\nbase and pursued them across\r\nthe galaxy.\r\n\r\nEvading the dreaded Imperial\r\nStarfleet, a group of freedom\r\nfighters led by Luke Skywalker\r\nhas established a new secret\r\nbase on the remote ice world\r\nof Hoth.\r\n\r\nThe evil lord Darth Vader,\r\nobsessed with finding young\r\nSkywalker, has dispatched\r\nthousands of remote probes into\r\nthe far reaches of space....&#39;,
   &#39;director&#39;: &#39;Irvin Kershner&#39;,
   &#39;producer&#39;: &#39;Gary Kurtz, Rick McCallum&#39;,
   &#39;release_date&#39;: &#39;1980-05-17&#39;,
   &#39;characters&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/2/&#39;,
    &#39;https://swapi.co/api/people/3/&#39;,
    &#39;https://swapi.co/api/people/4/&#39;,
    &#39;https://swapi.co/api/people/5/&#39;,
    &#39;https://swapi.co/api/people/10/&#39;,
    &#39;https://swapi.co/api/people/13/&#39;,
    &#39;https://swapi.co/api/people/14/&#39;,
    &#39;https://swapi.co/api/people/18/&#39;,
    &#39;https://swapi.co/api/people/20/&#39;,
    &#39;https://swapi.co/api/people/21/&#39;,
    &#39;https://swapi.co/api/people/22/&#39;,
    &#39;https://swapi.co/api/people/23/&#39;,
    &#39;https://swapi.co/api/people/24/&#39;,
    &#39;https://swapi.co/api/people/25/&#39;,
    &#39;https://swapi.co/api/people/26/&#39;],
   &#39;planets&#39;: [&#39;https://swapi.co/api/planets/4/&#39;,
    &#39;https://swapi.co/api/planets/5/&#39;,
    &#39;https://swapi.co/api/planets/6/&#39;,
    &#39;https://swapi.co/api/planets/27/&#39;],
   &#39;starships&#39;: [&#39;https://swapi.co/api/starships/15/&#39;,
    &#39;https://swapi.co/api/starships/10/&#39;,
    &#39;https://swapi.co/api/starships/11/&#39;,
    &#39;https://swapi.co/api/starships/12/&#39;,
    &#39;https://swapi.co/api/starships/21/&#39;,
    &#39;https://swapi.co/api/starships/22/&#39;,
    &#39;https://swapi.co/api/starships/23/&#39;,
    &#39;https://swapi.co/api/starships/3/&#39;,
    &#39;https://swapi.co/api/starships/17/&#39;],
   &#39;vehicles&#39;: [&#39;https://swapi.co/api/vehicles/8/&#39;,
    &#39;https://swapi.co/api/vehicles/14/&#39;,
    &#39;https://swapi.co/api/vehicles/16/&#39;,
    &#39;https://swapi.co/api/vehicles/18/&#39;,
    &#39;https://swapi.co/api/vehicles/19/&#39;,
    &#39;https://swapi.co/api/vehicles/20/&#39;],
   &#39;species&#39;: [&#39;https://swapi.co/api/species/6/&#39;,
    &#39;https://swapi.co/api/species/7/&#39;,
    &#39;https://swapi.co/api/species/3/&#39;,
    &#39;https://swapi.co/api/species/2/&#39;,
    &#39;https://swapi.co/api/species/1/&#39;],
   &#39;created&#39;: &#39;2014-12-12T11:26:24.656000Z&#39;,
   &#39;edited&#39;: &#39;2017-04-19T10:57:29.544256Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/films/2/&#39;},
  {&#39;title&#39;: &#39;Revenge of the Sith&#39;,
   &#39;episode_id&#39;: 3,
   &#39;opening_crawl&#39;: &#39;War! The Republic is crumbling\r\nunder attacks by the ruthless\r\nSith Lord, Count Dooku.\r\nThere are heroes on both sides.\r\nEvil is everywhere.\r\n\r\nIn a stunning move, the\r\nfiendish droid leader, General\r\nGrievous, has swept into the\r\nRepublic capital and kidnapped\r\nChancellor Palpatine, leader of\r\nthe Galactic Senate.\r\n\r\nAs the Separatist Droid Army\r\nattempts to flee the besieged\r\ncapital with their valuable\r\nhostage, two Jedi Knights lead a\r\ndesperate mission to rescue the\r\ncaptive Chancellor....&#39;,
   &#39;director&#39;: &#39;George Lucas&#39;,
   &#39;producer&#39;: &#39;Rick McCallum&#39;,
   &#39;release_date&#39;: &#39;2005-05-19&#39;,
   &#39;characters&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/2/&#39;,
    &#39;https://swapi.co/api/people/3/&#39;,
    &#39;https://swapi.co/api/people/4/&#39;,
    &#39;https://swapi.co/api/people/5/&#39;,
    &#39;https://swapi.co/api/people/6/&#39;,
    &#39;https://swapi.co/api/people/7/&#39;,
    &#39;https://swapi.co/api/people/10/&#39;,
    &#39;https://swapi.co/api/people/11/&#39;,
    &#39;https://swapi.co/api/people/12/&#39;,
    &#39;https://swapi.co/api/people/13/&#39;,
    &#39;https://swapi.co/api/people/20/&#39;,
    &#39;https://swapi.co/api/people/21/&#39;,
    &#39;https://swapi.co/api/people/33/&#39;,
    &#39;https://swapi.co/api/people/46/&#39;,
    &#39;https://swapi.co/api/people/51/&#39;,
    &#39;https://swapi.co/api/people/52/&#39;,
    &#39;https://swapi.co/api/people/53/&#39;,
    &#39;https://swapi.co/api/people/54/&#39;,
    &#39;https://swapi.co/api/people/55/&#39;,
    &#39;https://swapi.co/api/people/56/&#39;,
    &#39;https://swapi.co/api/people/58/&#39;,
    &#39;https://swapi.co/api/people/63/&#39;,
    &#39;https://swapi.co/api/people/64/&#39;,
    &#39;https://swapi.co/api/people/67/&#39;,
    &#39;https://swapi.co/api/people/68/&#39;,
    &#39;https://swapi.co/api/people/75/&#39;,
    &#39;https://swapi.co/api/people/78/&#39;,
    &#39;https://swapi.co/api/people/79/&#39;,
    &#39;https://swapi.co/api/people/80/&#39;,
    &#39;https://swapi.co/api/people/81/&#39;,
    &#39;https://swapi.co/api/people/82/&#39;,
    &#39;https://swapi.co/api/people/83/&#39;,
    &#39;https://swapi.co/api/people/35/&#39;],
   &#39;planets&#39;: [&#39;https://swapi.co/api/planets/2/&#39;,
    &#39;https://swapi.co/api/planets/5/&#39;,
    &#39;https://swapi.co/api/planets/8/&#39;,
    &#39;https://swapi.co/api/planets/9/&#39;,
    &#39;https://swapi.co/api/planets/12/&#39;,
    &#39;https://swapi.co/api/planets/13/&#39;,
    &#39;https://swapi.co/api/planets/14/&#39;,
    &#39;https://swapi.co/api/planets/15/&#39;,
    &#39;https://swapi.co/api/planets/16/&#39;,
    &#39;https://swapi.co/api/planets/17/&#39;,
    &#39;https://swapi.co/api/planets/18/&#39;,
    &#39;https://swapi.co/api/planets/19/&#39;,
    &#39;https://swapi.co/api/planets/1/&#39;],
   &#39;starships&#39;: [&#39;https://swapi.co/api/starships/48/&#39;,
    &#39;https://swapi.co/api/starships/59/&#39;,
    &#39;https://swapi.co/api/starships/61/&#39;,
    &#39;https://swapi.co/api/starships/32/&#39;,
    &#39;https://swapi.co/api/starships/63/&#39;,
    &#39;https://swapi.co/api/starships/64/&#39;,
    &#39;https://swapi.co/api/starships/65/&#39;,
    &#39;https://swapi.co/api/starships/66/&#39;,
    &#39;https://swapi.co/api/starships/74/&#39;,
    &#39;https://swapi.co/api/starships/75/&#39;,
    &#39;https://swapi.co/api/starships/2/&#39;,
    &#39;https://swapi.co/api/starships/68/&#39;],
   &#39;vehicles&#39;: [&#39;https://swapi.co/api/vehicles/33/&#39;,
    &#39;https://swapi.co/api/vehicles/50/&#39;,
    &#39;https://swapi.co/api/vehicles/53/&#39;,
    &#39;https://swapi.co/api/vehicles/56/&#39;,
    &#39;https://swapi.co/api/vehicles/60/&#39;,
    &#39;https://swapi.co/api/vehicles/62/&#39;,
    &#39;https://swapi.co/api/vehicles/67/&#39;,
    &#39;https://swapi.co/api/vehicles/69/&#39;,
    &#39;https://swapi.co/api/vehicles/70/&#39;,
    &#39;https://swapi.co/api/vehicles/71/&#39;,
    &#39;https://swapi.co/api/vehicles/72/&#39;,
    &#39;https://swapi.co/api/vehicles/73/&#39;,
    &#39;https://swapi.co/api/vehicles/76/&#39;],
   &#39;species&#39;: [&#39;https://swapi.co/api/species/19/&#39;,
    &#39;https://swapi.co/api/species/33/&#39;,
    &#39;https://swapi.co/api/species/2/&#39;,
    &#39;https://swapi.co/api/species/3/&#39;,
    &#39;https://swapi.co/api/species/36/&#39;,
    &#39;https://swapi.co/api/species/37/&#39;,
    &#39;https://swapi.co/api/species/6/&#39;,
    &#39;https://swapi.co/api/species/1/&#39;,
    &#39;https://swapi.co/api/species/34/&#39;,
    &#39;https://swapi.co/api/species/15/&#39;,
    &#39;https://swapi.co/api/species/35/&#39;,
    &#39;https://swapi.co/api/species/20/&#39;,
    &#39;https://swapi.co/api/species/23/&#39;,
    &#39;https://swapi.co/api/species/24/&#39;,
    &#39;https://swapi.co/api/species/25/&#39;,
    &#39;https://swapi.co/api/species/26/&#39;,
    &#39;https://swapi.co/api/species/27/&#39;,
    &#39;https://swapi.co/api/species/28/&#39;,
    &#39;https://swapi.co/api/species/29/&#39;,
    &#39;https://swapi.co/api/species/30/&#39;],
   &#39;created&#39;: &#39;2014-12-20T18:49:38.403000Z&#39;,
   &#39;edited&#39;: &#39;2015-04-11T09:45:44.862122Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/films/6/&#39;},
  {&#39;title&#39;: &#39;Return of the Jedi&#39;,
   &#39;episode_id&#39;: 6,
   &#39;opening_crawl&#39;: &#39;Luke Skywalker has returned to\r\nhis home planet of Tatooine in\r\nan attempt to rescue his\r\nfriend Han Solo from the\r\nclutches of the vile gangster\r\nJabba the Hutt.\r\n\r\nLittle does Luke know that the\r\nGALACTIC EMPIRE has secretly\r\nbegun construction on a new\r\narmored space station even\r\nmore powerful than the first\r\ndreaded Death Star.\r\n\r\nWhen completed, this ultimate\r\nweapon will spell certain doom\r\nfor the small band of rebels\r\nstruggling to restore freedom\r\nto the galaxy...&#39;,
   &#39;director&#39;: &#39;Richard Marquand&#39;,
   &#39;producer&#39;: &#39;Howard G. Kazanjian, George Lucas, Rick McCallum&#39;,
   &#39;release_date&#39;: &#39;1983-05-25&#39;,
   &#39;characters&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/2/&#39;,
    &#39;https://swapi.co/api/people/3/&#39;,
    &#39;https://swapi.co/api/people/4/&#39;,
    &#39;https://swapi.co/api/people/5/&#39;,
    &#39;https://swapi.co/api/people/10/&#39;,
    &#39;https://swapi.co/api/people/13/&#39;,
    &#39;https://swapi.co/api/people/14/&#39;,
    &#39;https://swapi.co/api/people/16/&#39;,
    &#39;https://swapi.co/api/people/18/&#39;,
    &#39;https://swapi.co/api/people/20/&#39;,
    &#39;https://swapi.co/api/people/21/&#39;,
    &#39;https://swapi.co/api/people/22/&#39;,
    &#39;https://swapi.co/api/people/25/&#39;,
    &#39;https://swapi.co/api/people/27/&#39;,
    &#39;https://swapi.co/api/people/28/&#39;,
    &#39;https://swapi.co/api/people/29/&#39;,
    &#39;https://swapi.co/api/people/30/&#39;,
    &#39;https://swapi.co/api/people/31/&#39;,
    &#39;https://swapi.co/api/people/45/&#39;],
   &#39;planets&#39;: [&#39;https://swapi.co/api/planets/5/&#39;,
    &#39;https://swapi.co/api/planets/7/&#39;,
    &#39;https://swapi.co/api/planets/8/&#39;,
    &#39;https://swapi.co/api/planets/9/&#39;,
    &#39;https://swapi.co/api/planets/1/&#39;],
   &#39;starships&#39;: [&#39;https://swapi.co/api/starships/15/&#39;,
    &#39;https://swapi.co/api/starships/10/&#39;,
    &#39;https://swapi.co/api/starships/11/&#39;,
    &#39;https://swapi.co/api/starships/12/&#39;,
    &#39;https://swapi.co/api/starships/22/&#39;,
    &#39;https://swapi.co/api/starships/23/&#39;,
    &#39;https://swapi.co/api/starships/27/&#39;,
    &#39;https://swapi.co/api/starships/28/&#39;,
    &#39;https://swapi.co/api/starships/29/&#39;,
    &#39;https://swapi.co/api/starships/3/&#39;,
    &#39;https://swapi.co/api/starships/17/&#39;,
    &#39;https://swapi.co/api/starships/2/&#39;],
   &#39;vehicles&#39;: [&#39;https://swapi.co/api/vehicles/8/&#39;,
    &#39;https://swapi.co/api/vehicles/16/&#39;,
    &#39;https://swapi.co/api/vehicles/18/&#39;,
    &#39;https://swapi.co/api/vehicles/19/&#39;,
    &#39;https://swapi.co/api/vehicles/24/&#39;,
    &#39;https://swapi.co/api/vehicles/25/&#39;,
    &#39;https://swapi.co/api/vehicles/26/&#39;,
    &#39;https://swapi.co/api/vehicles/30/&#39;],
   &#39;species&#39;: [&#39;https://swapi.co/api/species/1/&#39;,
    &#39;https://swapi.co/api/species/2/&#39;,
    &#39;https://swapi.co/api/species/3/&#39;,
    &#39;https://swapi.co/api/species/5/&#39;,
    &#39;https://swapi.co/api/species/6/&#39;,
    &#39;https://swapi.co/api/species/8/&#39;,
    &#39;https://swapi.co/api/species/9/&#39;,
    &#39;https://swapi.co/api/species/10/&#39;,
    &#39;https://swapi.co/api/species/15/&#39;],
   &#39;created&#39;: &#39;2014-12-18T10:39:33.255000Z&#39;,
   &#39;edited&#39;: &#39;2015-04-11T09:46:05.220365Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/films/3/&#39;},
  {&#39;title&#39;: &#39;A New Hope&#39;,
   &#39;episode_id&#39;: 4,
   &#39;opening_crawl&#39;: &#34;It is a period of civil war.\r\nRebel spaceships, striking\r\nfrom a hidden base, have won\r\ntheir first victory against\r\nthe evil Galactic Empire.\r\n\r\nDuring the battle, Rebel\r\nspies managed to steal secret\r\nplans to the Empire&#39;s\r\nultimate weapon, the DEATH\r\nSTAR, an armored space\r\nstation with enough power\r\nto destroy an entire planet.\r\n\r\nPursued by the Empire&#39;s\r\nsinister agents, Princess\r\nLeia races home aboard her\r\nstarship, custodian of the\r\nstolen plans that can save her\r\npeople and restore\r\nfreedom to the galaxy....&#34;,
   &#39;director&#39;: &#39;George Lucas&#39;,
   &#39;producer&#39;: &#39;Gary Kurtz, Rick McCallum&#39;,
   &#39;release_date&#39;: &#39;1977-05-25&#39;,
   &#39;characters&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/2/&#39;,
    &#39;https://swapi.co/api/people/3/&#39;,
    &#39;https://swapi.co/api/people/4/&#39;,
    &#39;https://swapi.co/api/people/5/&#39;,
    &#39;https://swapi.co/api/people/6/&#39;,
    &#39;https://swapi.co/api/people/7/&#39;,
    &#39;https://swapi.co/api/people/8/&#39;,
    &#39;https://swapi.co/api/people/9/&#39;,
    &#39;https://swapi.co/api/people/10/&#39;,
    &#39;https://swapi.co/api/people/12/&#39;,
    &#39;https://swapi.co/api/people/13/&#39;,
    &#39;https://swapi.co/api/people/14/&#39;,
    &#39;https://swapi.co/api/people/15/&#39;,
    &#39;https://swapi.co/api/people/16/&#39;,
    &#39;https://swapi.co/api/people/18/&#39;,
    &#39;https://swapi.co/api/people/19/&#39;,
    &#39;https://swapi.co/api/people/81/&#39;],
   &#39;planets&#39;: [&#39;https://swapi.co/api/planets/2/&#39;,
    &#39;https://swapi.co/api/planets/3/&#39;,
    &#39;https://swapi.co/api/planets/1/&#39;],
   &#39;starships&#39;: [&#39;https://swapi.co/api/starships/2/&#39;,
    &#39;https://swapi.co/api/starships/3/&#39;,
    &#39;https://swapi.co/api/starships/5/&#39;,
    &#39;https://swapi.co/api/starships/9/&#39;,
    &#39;https://swapi.co/api/starships/10/&#39;,
    &#39;https://swapi.co/api/starships/11/&#39;,
    &#39;https://swapi.co/api/starships/12/&#39;,
    &#39;https://swapi.co/api/starships/13/&#39;],
   &#39;vehicles&#39;: [&#39;https://swapi.co/api/vehicles/4/&#39;,
    &#39;https://swapi.co/api/vehicles/6/&#39;,
    &#39;https://swapi.co/api/vehicles/7/&#39;,
    &#39;https://swapi.co/api/vehicles/8/&#39;],
   &#39;species&#39;: [&#39;https://swapi.co/api/species/5/&#39;,
    &#39;https://swapi.co/api/species/3/&#39;,
    &#39;https://swapi.co/api/species/2/&#39;,
    &#39;https://swapi.co/api/species/1/&#39;,
    &#39;https://swapi.co/api/species/4/&#39;],
   &#39;created&#39;: &#39;2014-12-10T14:23:31.880000Z&#39;,
   &#39;edited&#39;: &#39;2015-04-11T09:46:52.774897Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/films/1/&#39;},
  {&#39;title&#39;: &#39;The Force Awakens&#39;,
   &#39;episode_id&#39;: 7,
   &#39;opening_crawl&#39;: &#34;Luke Skywalker has vanished.\r\nIn his absence, the sinister\r\nFIRST ORDER has risen from\r\nthe ashes of the Empire\r\nand will not rest until\r\nSkywalker, the last Jedi,\r\nhas been destroyed.\r\n \r\nWith the support of the\r\nREPUBLIC, General Leia Organa\r\nleads a brave RESISTANCE.\r\nShe is desperate to find her\r\nbrother Luke and gain his\r\nhelp in restoring peace and\r\njustice to the galaxy.\r\n \r\nLeia has sent her most daring\r\npilot on a secret mission\r\nto Jakku, where an old ally\r\nhas discovered a clue to\r\nLuke&#39;s whereabouts....&#34;,
   &#39;director&#39;: &#39;J. J. Abrams&#39;,
   &#39;producer&#39;: &#39;Kathleen Kennedy, J. J. Abrams, Bryan Burk&#39;,
   &#39;release_date&#39;: &#39;2015-12-11&#39;,
   &#39;characters&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/3/&#39;,
    &#39;https://swapi.co/api/people/5/&#39;,
    &#39;https://swapi.co/api/people/13/&#39;,
    &#39;https://swapi.co/api/people/14/&#39;,
    &#39;https://swapi.co/api/people/27/&#39;,
    &#39;https://swapi.co/api/people/84/&#39;,
    &#39;https://swapi.co/api/people/85/&#39;,
    &#39;https://swapi.co/api/people/86/&#39;,
    &#39;https://swapi.co/api/people/87/&#39;,
    &#39;https://swapi.co/api/people/88/&#39;],
   &#39;planets&#39;: [&#39;https://swapi.co/api/planets/61/&#39;],
   &#39;starships&#39;: [&#39;https://swapi.co/api/starships/77/&#39;,
    &#39;https://swapi.co/api/starships/10/&#39;],
   &#39;vehicles&#39;: [],
   &#39;species&#39;: [&#39;https://swapi.co/api/species/3/&#39;,
    &#39;https://swapi.co/api/species/2/&#39;,
    &#39;https://swapi.co/api/species/1/&#39;],
   &#39;created&#39;: &#39;2015-04-17T06:51:30.504780Z&#39;,
   &#39;edited&#39;: &#39;2015-12-17T14:31:47.617768Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/films/7/&#39;}],
 &#39;species&#39;: [{&#39;name&#39;: &#39;Human&#39;,
   &#39;classification&#39;: &#39;mammal&#39;,
   &#39;designation&#39;: &#39;sentient&#39;,
   &#39;average_height&#39;: 180,
   &#39;skin_colors&#39;: &#39;caucasian, black, asian, hispanic&#39;,
   &#39;hair_colors&#39;: &#39;blonde, brown, black, red&#39;,
   &#39;eye_colors&#39;: &#39;brown, blue, green, hazel, grey, amber&#39;,
   &#39;average_lifespan&#39;: 120,
   &#39;homeworld&#39;: &#39;https://swapi.co/api/planets/9/&#39;,
   &#39;language&#39;: &#39;Galactic Basic&#39;,
   &#39;people&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/4/&#39;,
    &#39;https://swapi.co/api/people/5/&#39;,
    &#39;https://swapi.co/api/people/6/&#39;,
    &#39;https://swapi.co/api/people/7/&#39;,
    &#39;https://swapi.co/api/people/9/&#39;,
    &#39;https://swapi.co/api/people/10/&#39;,
    &#39;https://swapi.co/api/people/11/&#39;,
    &#39;https://swapi.co/api/people/12/&#39;,
    &#39;https://swapi.co/api/people/14/&#39;,
    &#39;https://swapi.co/api/people/18/&#39;,
    &#39;https://swapi.co/api/people/19/&#39;,
    &#39;https://swapi.co/api/people/21/&#39;,
    &#39;https://swapi.co/api/people/22/&#39;,
    &#39;https://swapi.co/api/people/25/&#39;,
    &#39;https://swapi.co/api/people/26/&#39;,
    &#39;https://swapi.co/api/people/28/&#39;,
    &#39;https://swapi.co/api/people/29/&#39;,
    &#39;https://swapi.co/api/people/32/&#39;,
    &#39;https://swapi.co/api/people/34/&#39;,
    &#39;https://swapi.co/api/people/43/&#39;,
    &#39;https://swapi.co/api/people/51/&#39;,
    &#39;https://swapi.co/api/people/60/&#39;,
    &#39;https://swapi.co/api/people/61/&#39;,
    &#39;https://swapi.co/api/people/62/&#39;,
    &#39;https://swapi.co/api/people/66/&#39;,
    &#39;https://swapi.co/api/people/67/&#39;,
    &#39;https://swapi.co/api/people/68/&#39;,
    &#39;https://swapi.co/api/people/69/&#39;,
    &#39;https://swapi.co/api/people/74/&#39;,
    &#39;https://swapi.co/api/people/81/&#39;,
    &#39;https://swapi.co/api/people/84/&#39;,
    &#39;https://swapi.co/api/people/85/&#39;,
    &#39;https://swapi.co/api/people/86/&#39;,
    &#39;https://swapi.co/api/people/35/&#39;],
   &#39;films&#39;: [&#39;https://swapi.co/api/films/2/&#39;,
    &#39;https://swapi.co/api/films/7/&#39;,
    &#39;https://swapi.co/api/films/5/&#39;,
    &#39;https://swapi.co/api/films/4/&#39;,
    &#39;https://swapi.co/api/films/6/&#39;,
    &#39;https://swapi.co/api/films/3/&#39;,
    &#39;https://swapi.co/api/films/1/&#39;],
   &#39;created&#39;: &#39;2014-12-10T13:52:11.567000Z&#39;,
   &#39;edited&#39;: &#39;2015-04-17T06:59:55.850671Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/species/1/&#39;}],
 &#39;vehicles&#39;: [{&#39;name&#39;: &#39;Snowspeeder&#39;,
   &#39;model&#39;: &#39;t-47 airspeeder&#39;,
   &#39;manufacturer&#39;: &#39;Incom corporation&#39;,
   &#39;cost_in_credits&#39;: &#39;unknown&#39;,
   &#39;length&#39;: 4.5,
   &#39;max_atmosphering_speed&#39;: 650,
   &#39;crew&#39;: 2,
   &#39;passengers&#39;: 0,
   &#39;cargo_capacity&#39;: 10,
   &#39;consumables&#39;: &#39;none&#39;,
   &#39;vehicle_class&#39;: &#39;airspeeder&#39;,
   &#39;pilots&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/18/&#39;],
   &#39;films&#39;: [&#39;https://swapi.co/api/films/2/&#39;],
   &#39;created&#39;: &#39;2014-12-15T12:22:12Z&#39;,
   &#39;edited&#39;: &#39;2014-12-22T18:21:15.623033Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/vehicles/14/&#39;},
  {&#39;name&#39;: &#39;Imperial Speeder Bike&#39;,
   &#39;model&#39;: &#39;74-Z speeder bike&#39;,
   &#39;manufacturer&#39;: &#39;Aratech Repulsor Company&#39;,
   &#39;cost_in_credits&#39;: 8000,
   &#39;length&#39;: 3,
   &#39;max_atmosphering_speed&#39;: 360,
   &#39;crew&#39;: 1,
   &#39;passengers&#39;: 1,
   &#39;cargo_capacity&#39;: 4,
   &#39;consumables&#39;: &#39;1 day&#39;,
   &#39;vehicle_class&#39;: &#39;speeder&#39;,
   &#39;pilots&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/5/&#39;],
   &#39;films&#39;: [&#39;https://swapi.co/api/films/3/&#39;],
   &#39;created&#39;: &#39;2014-12-18T11:20:04.625000Z&#39;,
   &#39;edited&#39;: &#39;2014-12-22T18:21:15.920537Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/vehicles/30/&#39;}],
 &#39;starships&#39;: [{&#39;name&#39;: &#39;X-wing&#39;,
   &#39;model&#39;: &#39;T-65 X-wing&#39;,
   &#39;manufacturer&#39;: &#39;Incom Corporation&#39;,
   &#39;cost_in_credits&#39;: 149999,
   &#39;length&#39;: 12.5,
   &#39;max_atmosphering_speed&#39;: 1050,
   &#39;crew&#39;: 1,
   &#39;passengers&#39;: 0,
   &#39;cargo_capacity&#39;: 110,
   &#39;consumables&#39;: &#39;1 week&#39;,
   &#39;hyperdrive_rating&#39;: 1.0,
   &#39;MGLT&#39;: 100,
   &#39;starship_class&#39;: &#39;Starfighter&#39;,
   &#39;pilots&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/9/&#39;,
    &#39;https://swapi.co/api/people/18/&#39;,
    &#39;https://swapi.co/api/people/19/&#39;],
   &#39;films&#39;: [&#39;https://swapi.co/api/films/2/&#39;,
    &#39;https://swapi.co/api/films/3/&#39;,
    &#39;https://swapi.co/api/films/1/&#39;],
   &#39;created&#39;: &#39;2014-12-12T11:19:05.340000Z&#39;,
   &#39;edited&#39;: &#39;2014-12-22T17:35:44.491233Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/starships/12/&#39;},
  {&#39;name&#39;: &#39;Imperial shuttle&#39;,
   &#39;model&#39;: &#39;Lambda-class T-4a shuttle&#39;,
   &#39;manufacturer&#39;: &#39;Sienar Fleet Systems&#39;,
   &#39;cost_in_credits&#39;: 240000,
   &#39;length&#39;: 20,
   &#39;max_atmosphering_speed&#39;: 850,
   &#39;crew&#39;: 6,
   &#39;passengers&#39;: 20,
   &#39;cargo_capacity&#39;: 80000,
   &#39;consumables&#39;: &#39;2 months&#39;,
   &#39;hyperdrive_rating&#39;: 1.0,
   &#39;MGLT&#39;: 50,
   &#39;starship_class&#39;: &#39;Armed government transport&#39;,
   &#39;pilots&#39;: [&#39;https://swapi.co/api/people/1/&#39;,
    &#39;https://swapi.co/api/people/13/&#39;,
    &#39;https://swapi.co/api/people/14/&#39;],
   &#39;films&#39;: [&#39;https://swapi.co/api/films/2/&#39;, &#39;https://swapi.co/api/films/3/&#39;],
   &#39;created&#39;: &#39;2014-12-15T13:04:47.235000Z&#39;,
   &#39;edited&#39;: &#39;2014-12-22T17:35:44.795405Z&#39;,
   &#39;url&#39;: &#39;https://swapi.co/api/starships/22/&#39;}],
 &#39;created&#39;: &#39;2014-12-09T13:50:51.644000Z&#39;,
 &#39;edited&#39;: &#39;2014-12-20T21:17:56.891000Z&#39;,
 &#39;url&#39;: {&#39;name&#39;: &#39;Luke Skywalker&#39;,
  &#39;height&#39;: 172,
  &#39;mass&#39;: 77,
  &#39;hair_color&#39;: &#39;blond&#39;,
  &#39;skin_color&#39;: &#39;fair&#39;,
  &#39;eye_color&#39;: &#39;blue&#39;,
  &#39;birth_year&#39;: &#39;19BBY&#39;,
  &#39;gender&#39;: &#39;male&#39;,
  &#39;homeworld&#39;: &#39;https://swapi.co/api/planets/1/&#39;,
  &#39;films&#39;: [&#39;https://swapi.co/api/films/2/&#39;,
   &#39;https://swapi.co/api/films/6/&#39;,
   &#39;https://swapi.co/api/films/3/&#39;,
   &#39;https://swapi.co/api/films/1/&#39;,
   &#39;https://swapi.co/api/films/7/&#39;],
  &#39;species&#39;: [&#39;https://swapi.co/api/species/1/&#39;],
  &#39;vehicles&#39;: [&#39;https://swapi.co/api/vehicles/14/&#39;,
   &#39;https://swapi.co/api/vehicles/30/&#39;],
  &#39;starships&#39;: [&#39;https://swapi.co/api/starships/12/&#39;,
   &#39;https://swapi.co/api/starships/22/&#39;],
  &#39;created&#39;: &#39;2014-12-09T13:50:51.644000Z&#39;,
  &#39;edited&#39;: &#39;2014-12-20T21:17:56.891000Z&#39;,
  &#39;url&#39;: &#39;https://swapi.co/api/people/1/&#39;}}</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
db = client.saildrone
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
antarctica = db.create_collection('antarctica')
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
pymongo.common.
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>int</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
validator = """{
   'validator': {
      $jsonSchema: {
         bsonType: "object",
         required: [ "name", "year", "major", "address" ],
         properties: {
            name: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            year: {
               bsonType: "int",
               minimum: 2017,
               maximum: 3017,
               description: "must be an integer in [ 2017, 3017 ] and is required"
            },
            major: {
               enum: [ "Math", "English", "Computer Science", "History", null ],
               description: "can only be one of the enum values and is required"
            },
            gpa: {
               bsonType: [ "double" ],
               description: "must be a double if the field exists"
            },
            address: {
               bsonType: "object",
               required: [ "city" ],
               properties: {
                  street: {
                     bsonType: "string",
                     description: "must be a string if the field exists"
                  },
                  city: {
                     bsonType: "string",
                     "description": "must be a string and is required"
                  }
               }
            }
         }
      }
   }
"""
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import json
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
json.loads('{"validator": 1}')
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>{&#39;validator&#39;: 1}</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
client.list_database_names()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[&#39;admin&#39;, &#39;config&#39;, &#39;local&#39;, &#39;saildrone&#39;, &#39;test&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
db.list_collection_names()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[&#39;antarctica&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
antarctica = db.antartica
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
cursor = antarctica.aggregate([{
    "$match": {}
}])
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from datetime import (datetime, timedelta)
from random import (choice, randint, random, uniform, lognormvariate)

def feed_db(n):
    json_body = (
        {
            "measurement": "starfleet_01",
            "tags": {
                "cmdt": choice(("Archer", "Kirk", "Kruge")),
                "region": choice(("Andoria", "Deep Space Nine", "Earth", "Genesis")),
                "spacecraft": f"NX-17{randint(1, 10):02d}"
            },
            "time": (datetime.now() - timedelta(seconds=2*(n - i))).strftime("%Y-%m-%dT%H:%M:%S"),
            "fields": {
                "speed": lognormvariate(10, 3),
                "consumption": uniform(0, 300),
                "pressure_a": 3 + random(),
                "status_b": choice((True, False))
            }
        } for i in range(n)
    )
    antarctica.insert_many(json_body)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%timeit feed_db(100_000)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>3.56 s ± 26.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
antarctica.count_documents({})
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>2993003</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
antarctica.insert_one(
    {"item": "canvas",
     "qty": "$myMul(100)",
     "tags": ["cotton"],
     "size": {"h": 28, "w": 35.5, "uom": "cm"}})

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>&lt;pymongo.results.InsertOneResult at 0x7f1d8c753c08&gt;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
antarctica.aggregate([{
    "$match": {}},{
    "$project" : {"qty": 1}
}]).next()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>{&#39;_id&#39;: ObjectId(&#39;5d5ef7a5e261536f4714057d&#39;), &#39;qty&#39;: 100}</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
cursor = antarctica.find({})
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
list(cursor)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[{&#39;_id&#39;: ObjectId(&#39;5d5ef7a5e261536f4714057d&#39;),
  &#39;item&#39;: &#39;canvas&#39;,
  &#39;qty&#39;: 100,
  &#39;tags&#39;: [&#39;cotton&#39;],
  &#39;size&#39;: {&#39;h&#39;: 28, &#39;w&#39;: 35.5, &#39;uom&#39;: &#39;cm&#39;}},
 {&#39;_id&#39;: ObjectId(&#39;5d5ef86be261536f4714057e&#39;),
  &#39;item&#39;: &#39;canvas&#39;,
  &#39;qty&#39;: &#39;myMul(100)&#39;,
  &#39;tags&#39;: [&#39;cotton&#39;],
  &#39;size&#39;: {&#39;h&#39;: 28, &#39;w&#39;: 35.5, &#39;uom&#39;: &#39;cm&#39;}},
 {&#39;_id&#39;: ObjectId(&#39;5d5ef897e261536f4714057f&#39;),
  &#39;item&#39;: &#39;canvas&#39;,
  &#39;qty&#39;: &#39;$myMul(100)&#39;,
  &#39;tags&#39;: [&#39;cotton&#39;],
  &#39;size&#39;: {&#39;h&#39;: 28, &#39;w&#39;: 35.5, &#39;uom&#39;: &#39;cm&#39;}}]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
___
Replica set: A cluster of MongoDB servers that implements replication and automated failover. MongoDB’s recommended replication strategy. See Replication.

[Sharded cluster](https://docs.mongodb.com/manual/sharding/#sharded-cluster)
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python

```

</div>

</div>


