<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# S01 Relational Databases

For a simple tutorial on database design, see [Introduction to Database Design](https://www.datanamic.com/support/lt-dez005-introduction-db-modeling.html)

For a deep dive, see [Database Design for Mere Mortals](https://www.amazon.com/Database-Design-Mere-Mortals-Hands/dp/0321884493/ref=dp_ob_title_bk)
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## 0. Packages for working with relational databases in Python
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
- [Python Database API Specification v2.0](https://www.python.org/dev/peps/pep-0249/) - The standard Python Database API
- [sqlite3](https://docs.python.org/3.7/library/sqlite3.html) - API for builit-in `sqlite3` package
- [Database drivers](https://github.com/vinta/awesome-python#database-drivers) - For connecting to other databases
- [ipython-sql](https://github.com/catherinedevlin/ipython-sql) - SQL magic in Jupyter
- [SQLAlchemy](https://www.sqlalchemy.org) - Most well-known Object Relational Mapper (ORM)
- [Pony ORM](https://ponyorm.com) - Alternative ORM
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## 1. Motivation
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Why relational databases and SQL?

- History of databases
- ACID
- Data integrity
- Schema
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## 2. RDBMS

- Memory
- Storage
- Dictionary
- Query language
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## 3. Anatomy

- **Table** (Relation): Represents a *subject* or an *event*.
- **Column** (Attribute): Represents a single *variable* or *feature*.- 
- **Row** (Tuple): represents an *observation*.
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## 4. Concepts
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Constraints

You can impose constraints that values in a column have to take. For example, you can specify that values are compulsory (NOT NULL), or UNIQUE or fall within a certain range.
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Referential integrity
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
- Primary key represents a unique identifier of a row. It may be simple or composite.
  - Unique
  - Non-null
  - Never optional
- Foreign key is a column containing the primary key of a different table. It enforces *referential integrity*.
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Relationships
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
- One to one
- One to many
- Many to many

- What happens on delete?
  - Restrict
  - Cascade
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Indexes

An index is a data structure that allows fast search of a column (typically from linear to log time complexity). Most databases will automatically build an index for every primary key column, but you can also manually specify columns to build indexes for. 
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Views
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
- Temporary virtual table returned as a result of a *query*.
- Views only specify the strucutre of a table - the contents are constructed on the fly from existing tables.
- Queries return a Result Set
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## 5. Design
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Columns
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
- Use singlular form for name 
- Use informative names
- Use unique names not shared by any other table (except foreign keys)
- Column must be an attribute of the table's subject
- Eliminate multi-part columns
- Eliminate multi-value columsn
- Eliminate redundant columns
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Tables
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
- Use singular/plural forms for name (controversial)
- Enusre every table has a primary key
- Eliminate duplicate columns
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Relationships
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
- Establish participation type and degree of relationship
  - One to one
  - One to many
  - Many to many
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## 6. Example
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Use `sqlmagic` as alternative to using `sqlite3` driver.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%env DATABASE_URL=postgresql+psycopg2://postgres:postgres@db.postgres.app.com
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>env: DATABASE_URL=postgresql+psycopg2://postgres:postgres@db.postgres.app.com
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%load_ext sql
```

</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Connect to Postgres
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%config SqlMagic
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>SqlMagic options
--------------
SqlMagic.autocommit=&lt;Bool&gt;
    Current: True
    Set autocommit mode
SqlMagic.autolimit=&lt;Int&gt;
    Current: 0
    Automatically limit the size of the returned result sets
SqlMagic.autopandas=&lt;Bool&gt;
    Current: False
    Return Pandas DataFrames instead of regular result sets
SqlMagic.column_local_vars=&lt;Bool&gt;
    Current: False
    Return data into local variables from column names
SqlMagic.displaylimit=&lt;Int&gt;
    Current: None
    Automatically limit the number of rows displayed (full result set is still
    stored)
SqlMagic.dsn_filename=&lt;Unicode&gt;
    Current: &#39;odbc.ini&#39;
    Path to DSN file. When the first argument is of the form [section], a
    sqlalchemy connection string is formed from the matching section in the DSN
    file.
SqlMagic.feedback=&lt;Bool&gt;
    Current: True
    Print number of rows affected by DML
SqlMagic.short_errors=&lt;Bool&gt;
    Current: True
    Don&#39;t display the full traceback on SQL Programming Error
SqlMagic.style=&lt;Unicode&gt;
    Current: &#39;DEFAULT&#39;
    Set the table printing style to any of prettytable&#39;s defined styles
    (currently DEFAULT, MSWORD_FRIENDLY, PLAIN_COLUMNS, RANDOM)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
\d
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>6 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>Schema</th>
        <th>Name</th>
        <th>Type</th>
        <th>Owner</th>
    </tr>
    <tr>
        <td>public</td>
        <td>accounts</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>flat</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_cities</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_cities_id_seq</td>
        <td>sequence</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_weather_observations</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_weather_observations_id_seq</td>
        <td>sequence</td>
        <td>postgres</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
uri = "postgresql+psycopg2://postgres:postgres@db.postgres.app.com"
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%sql {uri}
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>&#39;Connected: postgres@None&#39;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
SQL for table deletion and creation
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Country;

CREATE TABLE Country (
    country_id varchar(2) PRIMARY KEY,
    country_name varchar(255)
);

CREATE TABLE Person (
    person_id SERIAL PRIMARY KEY,
    person_first varchar(255),
    person_last varchar(255),
    country_id varchar(2) NOT NULL,
    FOREIGN KEY (country_id) REFERENCES Country(country_id)
);
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
   postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
Done.
Done.
Done.
Done.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
SELECT * FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
   postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>schemaname</th>
        <th>tablename</th>
        <th>tableowner</th>
        <th>tablespace</th>
        <th>hasindexes</th>
        <th>hasrules</th>
        <th>hastriggers</th>
        <th>rowsecurity</th>
    </tr>
    <tr>
        <td>public</td>
        <td>country</td>
        <td>postgres</td>
        <td>None</td>
        <td>True</td>
        <td>False</td>
        <td>True</td>
        <td>False</td>
    </tr>
    <tr>
        <td>public</td>
        <td>person</td>
        <td>postgres</td>
        <td>None</td>
        <td>True</td>
        <td>False</td>
        <td>True</td>
        <td>False</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
SQL to insert rows.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

INSERT INTO Country(country_id, country_name) 
VALUES 
('FR', 'France'),
('CU', 'CUBA');
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
   postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
The `pg_relation_size()` function returns the size of the table only, not included indexes or additional objects.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT pg_size_pretty(pg_relation_size('Country'));
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
   postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
1 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>pg_size_pretty</th>
    </tr>
    <tr>
        <td>8192 bytes</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

INSERT INTO Person(person_first, person_last, country_id) 
VALUES 
('Napolean', 'Bonaparte', 'FR'),
('Luis','Alvarez', 'CU');
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
   postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Accessing the RDBMS dictionary.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT * FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog';
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
9 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>schemaname</th>
        <th>tablename</th>
        <th>tableowner</th>
        <th>tablespace</th>
        <th>hasindexes</th>
        <th>hasrules</th>
        <th>hastriggers</th>
        <th>rowsecurity</th>
    </tr>
    <tr>
        <td>public</td>
        <td>country</td>
        <td>postgres</td>
        <td>None</td>
        <td>True</td>
        <td>False</td>
        <td>True</td>
        <td>False</td>
    </tr>
    <tr>
        <td>public</td>
        <td>person</td>
        <td>postgres</td>
        <td>None</td>
        <td>True</td>
        <td>False</td>
        <td>True</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_features</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_implementation_info</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_languages</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_packages</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_parts</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_sizing</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_sizing_profiles</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT sql FROM postgres 
WHERE name='Person';
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
(psycopg2.errors.UndefinedTable) relation &#34;postgres&#34; does not exist
LINE 1: SELECT sql FROM postgres 
                        ^

[SQL: SELECT sql FROM postgres 
WHERE name=&#39;Person&#39;;]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
SQL as a Query Language.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT person_first as first, person_last AS last, country_name AS nationality
FROM Person 
INNER JOIN country 
ON Person.country_id = Country.country_id;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>first</th>
        <th>last</th>
        <th>nationality</th>
    </tr>
    <tr>
        <td>Napolean</td>
        <td>Bonaparte</td>
        <td>France</td>
    </tr>
    <tr>
        <td>Luis</td>
        <td>Alvarez</td>
        <td>CUBA</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Visualizing the entitry-relationship diagram (ERd).
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%config?
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea ">
<pre><span class="ansi-red-fg">Docstring:</span>
configure IPython

    %config Class[.trait=value]

This magic exposes most of the IPython config system. Any
Configurable class should be able to be configured with the simple
line::

    %config Class.trait=value

Where `value` will be resolved in the user&#39;s namespace, if it is an
expression or variable name.

Examples
--------

To see what classes are available for config, pass no arguments::

    In [1]: %config
    Available objects for config:
        TerminalInteractiveShell
        HistoryManager
        PrefilterManager
        AliasManager
        IPCompleter
        DisplayFormatter

To view what is configurable on a given class, just pass the class
name::

    In [2]: %config IPCompleter
    IPCompleter options
    -----------------
    IPCompleter.omit__names=&lt;Enum&gt;
        Current: 2
        Choices: (0, 1, 2)
        Instruct the completer to omit private method names
        Specifically, when completing on ``object.&lt;tab&gt;``.
        When 2 [default]: all names that start with &#39;_&#39; will be excluded.
        When 1: all &#39;magic&#39; names (``__foo__``) will be excluded.
        When 0: nothing will be excluded.
    IPCompleter.merge_completions=&lt;CBool&gt;
        Current: True
        Whether to merge completion results into a single list
        If False, only the completion results from the first non-empty
        completer will be returned.
    IPCompleter.limit_to__all__=&lt;CBool&gt;
        Current: False
        Instruct the completer to use __all__ for the completion
        Specifically, when completing on ``object.&lt;tab&gt;``.
        When True: only those names in obj.__all__ will be included.
        When False [default]: the __all__ attribute is ignored
    IPCompleter.greedy=&lt;CBool&gt;
        Current: False
        Activate greedy completion
        This will enable completion on elements of lists, results of
        function calls, etc., but can be unsafe because the code is
        actually evaluated on TAB.

but the real use is in setting values::

    In [3]: %config IPCompleter.greedy = True

and these values are read from the user_ns if they are variables::

    In [4]: feeling_greedy=False

    In [5]: %config IPCompleter.greedy = feeling_greedy
<span class="ansi-red-fg">File:</span>      /opt/conda/lib/python3.7/site-packages/IPython/core/magics/config.py
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import ibis
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import eralchemy
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from sqlalchemy import create_engine

engine = create_engine(uri)
conn = engine.connect()
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import os
from eralchemy import render_er

if not os.path.exists('erd_from_sqlalchemy.png'):
    render_er(uri, 'erd_from_sqlalchemy.png')
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stderr output_text">
<pre>/opt/conda/lib/python3.7/site-packages/sqlalchemy/dialects/postgresql/base.py:2972: SAWarning: Did not recognize type &#39;point&#39; of column &#39;location&#39;
  &#34;Did not recognize type &#39;%s&#39; of column &#39;%s&#39;&#34; % (attype, name)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
![](erd_from_sqlalchemy.png)
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## Homework walk-through

Convert the flat file data in `data/flat.csv` into a well-structured relational database in SQLite3 stored as `data/faculty.db`. Note - salary information is confidential and should be kept in a separate table from other personal data.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import pandas as pd
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat = pd.read_csv('../data/flat.csv', keep_default_na=False)
flat.sample(3)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>gender</th>
      <th>age</th>
      <th>height</th>
      <th>weight</th>
      <th>salary</th>
      <th>nationality</th>
      <th>code</th>
      <th>country</th>
      <th>language1</th>
      <th>language2</th>
      <th>language3</th>
      <th>first</th>
      <th>last</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>899</th>
      <td>Lucien Pittman</td>
      <td>Male</td>
      <td>61</td>
      <td>1.87</td>
      <td>58</td>
      <td>73000</td>
      <td>Danish</td>
      <td>DK</td>
      <td>Denmark</td>
      <td>AutoIt</td>
      <td>Dylan</td>
      <td>Transact-SQL</td>
      <td>Lucien</td>
      <td>Pittman</td>
    </tr>
    <tr>
      <th>1516</th>
      <td>Zane Calhoun</td>
      <td>Male</td>
      <td>60</td>
      <td>1.93</td>
      <td>48</td>
      <td>127000</td>
      <td>Greek</td>
      <td>GR</td>
      <td>Greece</td>
      <td>Io</td>
      <td>Java</td>
      <td></td>
      <td>Zane</td>
      <td>Calhoun</td>
    </tr>
    <tr>
      <th>827</th>
      <td>Lauran Willis</td>
      <td>Female</td>
      <td>34</td>
      <td>1.92</td>
      <td>75</td>
      <td>89000</td>
      <td>Romanian</td>
      <td>RO</td>
      <td>Romania</td>
      <td></td>
      <td></td>
      <td></td>
      <td>Lauran</td>
      <td>Willis</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat.to_sql('flat', conn)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

\d
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
6 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>Schema</th>
        <th>Name</th>
        <th>Type</th>
        <th>Owner</th>
    </tr>
    <tr>
        <td>public</td>
        <td>accounts</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>flat</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_cities</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_cities_id_seq</td>
        <td>sequence</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_weather_observations</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
    <tr>
        <td>public</td>
        <td>t_weather_observations_id_seq</td>
        <td>sequence</td>
        <td>postgres</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

USE faculty;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
(psycopg2.errors.SyntaxError) syntax error at or near &#34;USE&#34;
LINE 1: USE faculty;
        ^

[SQL: USE faculty;]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Country;

CREATE TABLE Country (
    country_id varchar(2) PRIMARY KEY,
    country_name varchar(255)
);

CREATE TABLE Person (
    person_id SERIAL PRIMARY KEY,
    name varchar(255),
    age INTEGER NOT NULL,
    country_id varchar(2) NOT NULL,
      FOREIGN KEY (country_id) REFERENCES Country(country_id)
);
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
Done.
Done.
Done.
Done.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

INSERT INTO Country(country_id, country_name) 
VALUES ('FR', 'France'), ('CU', 'CUBA');
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
DELETE FROM Country
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
SELECT * FROM Country
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
0 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>country_id</th>
        <th>country_name</th>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from sqlalchemy import create_engine

engine = create_engine(uri)
conn = engine.connect()
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat.columns
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Index([&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;, &#39;height&#39;, &#39;weight&#39;, &#39;salary&#39;, &#39;nationality&#39;,
       &#39;code&#39;, &#39;country&#39;, &#39;language1&#39;, &#39;language2&#39;, &#39;language3&#39;, &#39;first&#39;,
       &#39;last&#39;],
      dtype=&#39;object&#39;)</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat.rename(mapper={'code': 'country_id',
                    'country': 'country_name'},
           inplace=True)

```

</div>

</div>country = flat[['country_id', 'country_name']]country.set_index('country_id').to_sql('Country', engine, if_exists='append')
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# %%sql
SELECT * FROM Country
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat.to_sql?
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea ">
<pre><span class="ansi-red-fg">Signature:</span>
flat<span class="ansi-blue-fg">.</span>to_sql<span class="ansi-blue-fg">(</span>
    name<span class="ansi-blue-fg">,</span>
    con<span class="ansi-blue-fg">,</span>
    schema<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    if_exists<span class="ansi-blue-fg">=</span><span class="ansi-blue-fg">&#39;fail&#39;</span><span class="ansi-blue-fg">,</span>
    index<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
    index_label<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    chunksize<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    dtype<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    method<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
<span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Docstring:</span>
Write records stored in a DataFrame to a SQL database.

Databases supported by SQLAlchemy [1]_ are supported. Tables can be
newly created, appended to, or overwritten.

Parameters
----------
name : string
    Name of SQL table.
con : sqlalchemy.engine.Engine or sqlite3.Connection
    Using SQLAlchemy makes it possible to use any DB supported by that
    library. Legacy support is provided for sqlite3.Connection objects.
schema : string, optional
    Specify the schema (if database flavor supports this). If None, use
    default schema.
if_exists : {&#39;fail&#39;, &#39;replace&#39;, &#39;append&#39;}, default &#39;fail&#39;
    How to behave if the table already exists.

    * fail: Raise a ValueError.
    * replace: Drop the table before inserting new values.
    * append: Insert new values to the existing table.

index : bool, default True
    Write DataFrame index as a column. Uses `index_label` as the column
    name in the table.
index_label : string or sequence, default None
    Column label for index column(s). If None is given (default) and
    `index` is True, then the index names are used.
    A sequence should be given if the DataFrame uses MultiIndex.
chunksize : int, optional
    Rows will be written in batches of this size at a time. By default,
    all rows will be written at once.
dtype : dict, optional
    Specifying the datatype for columns. The keys should be the column
    names and the values should be the SQLAlchemy types or strings for
    the sqlite3 legacy mode.
method : {None, &#39;multi&#39;, callable}, default None
    Controls the SQL insertion clause used:

    * None : Uses standard SQL ``INSERT`` clause (one per row).
    * &#39;multi&#39;: Pass multiple values in a single ``INSERT`` clause.
    * callable with signature ``(pd_table, conn, keys, data_iter)``.

    Details and a sample callable implementation can be found in the
    section :ref:`insert method &lt;io.sql.method&gt;`.

    .. versionadded:: 0.24.0

Raises
------
ValueError
    When the table already exists and `if_exists` is &#39;fail&#39; (the
    default).

See Also
--------
read_sql : Read a DataFrame from a table.

Notes
-----
Timezone aware datetime columns will be written as
``Timestamp with timezone`` type with SQLAlchemy if supported by the
database. Otherwise, the datetimes will be stored as timezone unaware
timestamps local to the original timezone.

.. versionadded:: 0.24.0

References
----------
.. [1] http://docs.sqlalchemy.org
.. [2] https://www.python.org/dev/peps/pep-0249/

Examples
--------

Create an in-memory SQLite database.

&gt;&gt;&gt; from sqlalchemy import create_engine
&gt;&gt;&gt; engine = create_engine(&#39;sqlite://&#39;, echo=False)

Create a table from scratch with 3 rows.

&gt;&gt;&gt; df = pd.DataFrame({&#39;name&#39; : [&#39;User 1&#39;, &#39;User 2&#39;, &#39;User 3&#39;]})
&gt;&gt;&gt; df
     name
0  User 1
1  User 2
2  User 3

&gt;&gt;&gt; df.to_sql(&#39;users&#39;, con=engine)
&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM users&#34;).fetchall()
[(0, &#39;User 1&#39;), (1, &#39;User 2&#39;), (2, &#39;User 3&#39;)]

&gt;&gt;&gt; df1 = pd.DataFrame({&#39;name&#39; : [&#39;User 4&#39;, &#39;User 5&#39;]})
&gt;&gt;&gt; df1.to_sql(&#39;users&#39;, con=engine, if_exists=&#39;append&#39;)
&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM users&#34;).fetchall()
[(0, &#39;User 1&#39;), (1, &#39;User 2&#39;), (2, &#39;User 3&#39;),
 (0, &#39;User 4&#39;), (1, &#39;User 5&#39;)]

Overwrite the table with just ``df1``.

&gt;&gt;&gt; df1.to_sql(&#39;users&#39;, con=engine, if_exists=&#39;replace&#39;,
...            index_label=&#39;id&#39;)
&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM users&#34;).fetchall()
[(0, &#39;User 4&#39;), (1, &#39;User 5&#39;)]

Specify the dtype (especially useful for integers with missing values).
Notice that while pandas is forced to store the data as floating point,
the database supports nullable integers. When fetching the data with
Python, we get back integer scalars.

&gt;&gt;&gt; df = pd.DataFrame({&#34;A&#34;: [1, None, 2]})
&gt;&gt;&gt; df
     A
0  1.0
1  NaN
2  2.0

&gt;&gt;&gt; from sqlalchemy.types import Integer
&gt;&gt;&gt; df.to_sql(&#39;integers&#39;, con=engine, index=False,
...           dtype={&#34;A&#34;: Integer()})

&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM integers&#34;).fetchall()
[(1,), (None,), (2,)]
<span class="ansi-red-fg">File:</span>      /opt/conda/lib/python3.7/site-packages/pandas/core/generic.py
<span class="ansi-red-fg">Type:</span>      method
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python

```

</div>

</div>


