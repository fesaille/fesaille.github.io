<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Tutorials:
- http://www.postgresqltutorial.com/
- https://www.postgresql.org/docs/11/tutorial-sql.html

Postgres jupyter kernel: https://github.com/bgschiller/postgres_kernel
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
pgspecial must be installed for running special command postgres command in this notebook
</div>
</div>
</div>%pip install pgspecial
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Use `sqlmagic` and set sqlmagic compatible uri
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%load_ext sql
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>The sql extension is already loaded. To reload it, use:
  %reload_ext sql
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# Initialisation
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
uri = "postgresql+psycopg2://postgres:postgres@db.postgres.app.com"
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%sql {uri}
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>&#39;Connected: postgres@None&#39;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
SQL for table deletion and creation
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%sql select current_database()
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
1 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>current_database</th>
    </tr>
    <tr>
        <td>postgres</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT * FROM pg_tables
WHERE schemaname NOT IN ('pg_catalog', 'information_schema');
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
1 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>schemaname</th>
        <th>tablename</th>
        <th>tableowner</th>
        <th>tablespace</th>
        <th>hasindexes</th>
        <th>hasrules</th>
        <th>hastriggers</th>
        <th>rowsecurity</th>
    </tr>
    <tr>
        <td>public</td>
        <td>country</td>
        <td>postgres</td>
        <td>None</td>
        <td>True</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Country;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
Done.
Done.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# Create table
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
**Primary key**, auto-increment (see [post](https://chartio.com/resources/tutorials/how-to-define-an-auto-increment-primary-key-in-postgresql/)):
- usage of the SERIAL or BIGSERIAL data types when CREATING a new table.
- creating a custom SEQUENCE
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

CREATE TABLE Country (
    country_id varchar(2) PRIMARY KEY,
    country_name varchar(255)
);

CREATE TABLE Person (
    person_id SERIAL PRIMARY KEY,
    person_first varchar(255),
    person_last varchar(255),
    country_id varchar(2) NOT NULL,
    FOREIGN KEY (country_id) REFERENCES Country(country_id),
    CON
);
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
Done.
(psycopg2.errors.SyntaxError) syntax error at or near &#34;)&#34;
LINE 8: );
        ^

[SQL: CREATE TABLE Person (
    person_id SERIAL PRIMARY KEY,
    person_first varchar(255),
    person_last varchar(255),
    country_id varchar(2) NOT NULL,
    FOREIGN KEY (country_id) REFERENCES Country(country_id),
    CON
);]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
View table list, either with postgres special command `\dt` or from *pg_catalog*
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
\dt
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
1 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>Schema</th>
        <th>Name</th>
        <th>Type</th>
        <th>Owner</th>
    </tr>
    <tr>
        <td>public</td>
        <td>country</td>
        <td>table</td>
        <td>postgres</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
DESCRIBE accounts;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
(psycopg2.errors.SyntaxError) syntax error at or near &#34;DESCRIBE&#34;
LINE 1: DESCRIBE accounts;
        ^

[SQL: DESCRIBE accounts;]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
SELECT * FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
1 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>schemaname</th>
        <th>tablename</th>
        <th>tableowner</th>
        <th>tablespace</th>
        <th>hasindexes</th>
        <th>hasrules</th>
        <th>hastriggers</th>
        <th>rowsecurity</th>
    </tr>
    <tr>
        <td>public</td>
        <td>country</td>
        <td>postgres</td>
        <td>None</td>
        <td>True</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# Insert rows
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

INSERT INTO Country(country_id, country_name) 
VALUES 
('FR', 'France'),
('CU', 'CUBA');
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
The `pg_relation_size()` function returns the size of the table only, not included indexes or additional objects.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT pg_size_pretty(pg_relation_size('Country'));
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
1 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>pg_size_pretty</th>
    </tr>
    <tr>
        <td>8192 bytes</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

INSERT INTO Person (person_first, person_last, country_id) 
VALUES 
('Napolean', 'Bonaparte', 'FR'),
('Luis','Alvarez', 'CU');
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
(psycopg2.errors.UndefinedTable) relation &#34;person&#34; does not exist
LINE 1: INSERT INTO Person (person_first, person_last, country_id) 
                    ^

[SQL: INSERT INTO Person (person_first, person_last, country_id) 
VALUES 
(&#39;Napolean&#39;, &#39;Bonaparte&#39;, &#39;FR&#39;),
(&#39;Luis&#39;,&#39;Alvarez&#39;, &#39;CU&#39;);]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Accessing the RDBMS dictionary.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT * FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog';
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
8 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>schemaname</th>
        <th>tablename</th>
        <th>tableowner</th>
        <th>tablespace</th>
        <th>hasindexes</th>
        <th>hasrules</th>
        <th>hastriggers</th>
        <th>rowsecurity</th>
    </tr>
    <tr>
        <td>public</td>
        <td>country</td>
        <td>postgres</td>
        <td>None</td>
        <td>True</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_features</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_implementation_info</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_languages</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_packages</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_parts</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_sizing</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
    <tr>
        <td>information_schema</td>
        <td>sql_sizing_profiles</td>
        <td>postgres</td>
        <td>None</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
        <td>False</td>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT sql FROM postgres 
WHERE name='Person';
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
(psycopg2.errors.UndefinedTable) relation &#34;postgres&#34; does not exist
LINE 1: SELECT sql FROM postgres 
                        ^

[SQL: SELECT sql FROM postgres 
WHERE name=&#39;Person&#39;;]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
SQL as a Query Language.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

SELECT person_first as first, person_last AS last, country_name AS nationality
FROM Person 
INNER JOIN country 
ON Person.country_id = Country.country_id;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
(psycopg2.errors.UndefinedTable) relation &#34;person&#34; does not exist
LINE 2: FROM Person 
             ^

[SQL: SELECT person_first as first, person_last AS last, country_name AS nationality
FROM Person 
INNER JOIN country 
ON Person.country_id = Country.country_id;]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Visualizing the entitry-relationship diagram (ERd).
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import ibis
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import eralchemy
```

</div>

</div>import os
from eralchemy import render_er

if not os.path.exists('erd_from_sqlalchemy.png'):
    render_er(uri, 'erd_from_sqlalchemy.png')
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
![](erd_from_sqlalchemy.png)
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## Homework walk-through

Convert the flat file data in `data/flat.csv` into a well-structured relational database in SQLite3 stored as `data/faculty.db`. Note - salary information is confidential and should be kept in a separate table from other personal data.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import pandas as pd
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat = pd.read_csv('../data/flat.csv', keep_default_na=False)
flat.sample(3)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>gender</th>
      <th>age</th>
      <th>height</th>
      <th>weight</th>
      <th>salary</th>
      <th>nationality</th>
      <th>code</th>
      <th>country</th>
      <th>language1</th>
      <th>language2</th>
      <th>language3</th>
      <th>first</th>
      <th>last</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>915</td>
      <td>Lynwood Pope</td>
      <td>Male</td>
      <td>20</td>
      <td>1.51</td>
      <td>40</td>
      <td>88000</td>
      <td>Jordanian</td>
      <td>JO</td>
      <td>Jordan</td>
      <td>ASP</td>
      <td>Scala</td>
      <td></td>
      <td>Lynwood</td>
      <td>Pope</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Aaron Kirby</td>
      <td>Male</td>
      <td>59</td>
      <td>1.69</td>
      <td>43</td>
      <td>80000</td>
      <td>Spanish</td>
      <td>SP</td>
      <td>Spain</td>
      <td>Falcon</td>
      <td>haXe</td>
      <td>GNU Octave</td>
      <td>Aaron</td>
      <td>Kirby</td>
    </tr>
    <tr>
      <td>239</td>
      <td>Clarita Carver</td>
      <td>Female</td>
      <td>35</td>
      <td>1.66</td>
      <td>71</td>
      <td>84000</td>
      <td>Finnish</td>
      <td>FI</td>
      <td>Finland</td>
      <td>Prolog</td>
      <td>Erlang</td>
      <td>Smalltalk</td>
      <td>Clarita</td>
      <td>Carver</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

USE faculty;
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com
(psycopg2.errors.SyntaxError) syntax error at or near &#34;USE&#34;
LINE 1: USE faculty;
        ^

[SQL: USE faculty;]
(Background on this error at: http://sqlalche.me/e/f405)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Country;

CREATE TABLE Country (
    country_id varchar(2) PRIMARY KEY,
    country_name varchar(255)
);

CREATE TABLE Person (
    person_id SERIAL PRIMARY KEY,
    name varchar(255),
    age INTEGER NOT NULL,
    country_id varchar(2) NOT NULL,
      FOREIGN KEY (country_id) REFERENCES Country(country_id)
);
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
Done.
Done.
Done.
Done.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql

INSERT INTO Country(country_id, country_name) 
VALUES ('FR', 'France'), ('CU', 'CUBA');
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
DELETE FROM Country
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
2 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>[]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
%%sql
SELECT * FROM Country
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre> * postgresql+psycopg2://postgres:***@db.postgres.app.com/postgres
0 rows affected.
</pre>
</div>
</div>

<div class="output_area" markdown="1">

<div class="output_html rendered_html output_subarea output_execute_result">
<table>
    <tr>
        <th>country_id</th>
        <th>country_name</th>
    </tr>
</table>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from sqlalchemy import create_engine
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
engine = create_engine(uri)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
conn = engine.connect()
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat.columns
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>Index([&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;, &#39;height&#39;, &#39;weight&#39;, &#39;salary&#39;, &#39;nationality&#39;,
       &#39;code&#39;, &#39;country&#39;, &#39;language1&#39;, &#39;language2&#39;, &#39;language3&#39;, &#39;first&#39;,
       &#39;last&#39;],
      dtype=&#39;object&#39;)</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat.rename(mapper={'code': 'country_id',
                    'country': 'country_name'},
           inplace=True)

```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
country = flat[['country_id', 'country_name']]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">KeyError</span>                                  Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-31-f9749b54edd5&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>country <span class="ansi-blue-fg">=</span> flat<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">&#39;country_id&#39;</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">&#39;country_name&#39;</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">]</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/core/frame.py</span> in <span class="ansi-cyan-fg">__getitem__</span><span class="ansi-blue-fg">(self, key)</span>
<span class="ansi-green-intense-fg ansi-bold">   2932</span>                 key <span class="ansi-blue-fg">=</span> list<span class="ansi-blue-fg">(</span>key<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   2933</span>             indexer = self.loc._convert_to_indexer(key, axis=1,
<span class="ansi-green-fg">-&gt; 2934</span><span class="ansi-red-fg">                                                    raise_missing=True)
</span><span class="ansi-green-intense-fg ansi-bold">   2935</span> 
<span class="ansi-green-intense-fg ansi-bold">   2936</span>         <span class="ansi-red-fg"># take() does not accept boolean indexers</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/core/indexing.py</span> in <span class="ansi-cyan-fg">_convert_to_indexer</span><span class="ansi-blue-fg">(self, obj, axis, is_setter, raise_missing)</span>
<span class="ansi-green-intense-fg ansi-bold">   1352</span>                 kwargs = {&#39;raise_missing&#39;: True if is_setter else
<span class="ansi-green-intense-fg ansi-bold">   1353</span>                           raise_missing}
<span class="ansi-green-fg">-&gt; 1354</span><span class="ansi-red-fg">                 </span><span class="ansi-green-fg">return</span> self<span class="ansi-blue-fg">.</span>_get_listlike_indexer<span class="ansi-blue-fg">(</span>obj<span class="ansi-blue-fg">,</span> axis<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">]</span>
<span class="ansi-green-intense-fg ansi-bold">   1355</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1356</span>             <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/core/indexing.py</span> in <span class="ansi-cyan-fg">_get_listlike_indexer</span><span class="ansi-blue-fg">(self, key, axis, raise_missing)</span>
<span class="ansi-green-intense-fg ansi-bold">   1159</span>         self._validate_read_indexer(keyarr, indexer,
<span class="ansi-green-intense-fg ansi-bold">   1160</span>                                     o<span class="ansi-blue-fg">.</span>_get_axis_number<span class="ansi-blue-fg">(</span>axis<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg">-&gt; 1161</span><span class="ansi-red-fg">                                     raise_missing=raise_missing)
</span><span class="ansi-green-intense-fg ansi-bold">   1162</span>         <span class="ansi-green-fg">return</span> keyarr<span class="ansi-blue-fg">,</span> indexer
<span class="ansi-green-intense-fg ansi-bold">   1163</span> 

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/core/indexing.py</span> in <span class="ansi-cyan-fg">_validate_read_indexer</span><span class="ansi-blue-fg">(self, key, indexer, axis, raise_missing)</span>
<span class="ansi-green-intense-fg ansi-bold">   1244</span>                 raise KeyError(
<span class="ansi-green-intense-fg ansi-bold">   1245</span>                     u&#34;None of [{key}] are in the [{axis}]&#34;.format(
<span class="ansi-green-fg">-&gt; 1246</span><span class="ansi-red-fg">                         key=key, axis=self.obj._get_axis_name(axis)))
</span><span class="ansi-green-intense-fg ansi-bold">   1247</span> 
<span class="ansi-green-intense-fg ansi-bold">   1248</span>             <span class="ansi-red-fg"># We (temporarily) allow for some missing keys with .loc, except in</span>

<span class="ansi-red-fg">KeyError</span>: &#34;None of [Index([&#39;country_id&#39;, &#39;country_name&#39;], dtype=&#39;object&#39;)] are in the [columns]&#34;</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
country.set_index('country_id').to_sql('Country', engine, if_exists='append')
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">UndefinedColumn</span>                           Traceback (most recent call last)
<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/engine/base.py</span> in <span class="ansi-cyan-fg">_execute_context</span><span class="ansi-blue-fg">(self, dialect, constructor, statement, parameters, *args)</span>
<span class="ansi-green-intense-fg ansi-bold">   1223</span>                     self.dialect.do_executemany(
<span class="ansi-green-fg">-&gt; 1224</span><span class="ansi-red-fg">                         </span>cursor<span class="ansi-blue-fg">,</span> statement<span class="ansi-blue-fg">,</span> parameters<span class="ansi-blue-fg">,</span> context
<span class="ansi-green-intense-fg ansi-bold">   1225</span>                     )

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py</span> in <span class="ansi-cyan-fg">do_executemany</span><span class="ansi-blue-fg">(self, cursor, statement, parameters, context)</span>
<span class="ansi-green-intense-fg ansi-bold">    751</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 752</span><span class="ansi-red-fg">             </span>cursor<span class="ansi-blue-fg">.</span>executemany<span class="ansi-blue-fg">(</span>statement<span class="ansi-blue-fg">,</span> parameters<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    753</span> 

<span class="ansi-red-fg">UndefinedColumn</span>: column &#34;country_id&#34; of relation &#34;Country&#34; does not exist
LINE 1: INSERT INTO &#34;Country&#34; (country_id, country_name) VALUES (&#39;GB...
                               ^


The above exception was the direct cause of the following exception:

<span class="ansi-red-fg">ProgrammingError</span>                          Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-103-42976342ffd9&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>country<span class="ansi-blue-fg">.</span>set_index<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">&#39;country_id&#39;</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>to_sql<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">&#39;Country&#39;</span><span class="ansi-blue-fg">,</span> engine<span class="ansi-blue-fg">,</span> if_exists<span class="ansi-blue-fg">=</span><span class="ansi-blue-fg">&#39;append&#39;</span><span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py</span> in <span class="ansi-cyan-fg">to_sql</span><span class="ansi-blue-fg">(self, name, con, schema, if_exists, index, index_label, chunksize, dtype, method)</span>
<span class="ansi-green-intense-fg ansi-bold">   2529</span>         sql.to_sql(self, name, con, schema=schema, if_exists=if_exists,
<span class="ansi-green-intense-fg ansi-bold">   2530</span>                    index<span class="ansi-blue-fg">=</span>index<span class="ansi-blue-fg">,</span> index_label<span class="ansi-blue-fg">=</span>index_label<span class="ansi-blue-fg">,</span> chunksize<span class="ansi-blue-fg">=</span>chunksize<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg">-&gt; 2531</span><span class="ansi-red-fg">                    dtype=dtype, method=method)
</span><span class="ansi-green-intense-fg ansi-bold">   2532</span> 
<span class="ansi-green-intense-fg ansi-bold">   2533</span>     def to_pickle(self, path, compression=&#39;infer&#39;,

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/io/sql.py</span> in <span class="ansi-cyan-fg">to_sql</span><span class="ansi-blue-fg">(frame, name, con, schema, if_exists, index, index_label, chunksize, dtype, method)</span>
<span class="ansi-green-intense-fg ansi-bold">    458</span>     pandas_sql.to_sql(frame, name, if_exists=if_exists, index=index,
<span class="ansi-green-intense-fg ansi-bold">    459</span>                       index_label<span class="ansi-blue-fg">=</span>index_label<span class="ansi-blue-fg">,</span> schema<span class="ansi-blue-fg">=</span>schema<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg">--&gt; 460</span><span class="ansi-red-fg">                       chunksize=chunksize, dtype=dtype, method=method)
</span><span class="ansi-green-intense-fg ansi-bold">    461</span> 
<span class="ansi-green-intense-fg ansi-bold">    462</span> 

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/io/sql.py</span> in <span class="ansi-cyan-fg">to_sql</span><span class="ansi-blue-fg">(self, frame, name, if_exists, index, index_label, schema, chunksize, dtype, method)</span>
<span class="ansi-green-intense-fg ansi-bold">   1172</span>                          schema=schema, dtype=dtype)
<span class="ansi-green-intense-fg ansi-bold">   1173</span>         table<span class="ansi-blue-fg">.</span>create<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">-&gt; 1174</span><span class="ansi-red-fg">         </span>table<span class="ansi-blue-fg">.</span>insert<span class="ansi-blue-fg">(</span>chunksize<span class="ansi-blue-fg">,</span> method<span class="ansi-blue-fg">=</span>method<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1175</span>         <span class="ansi-green-fg">if</span> <span class="ansi-blue-fg">(</span><span class="ansi-green-fg">not</span> name<span class="ansi-blue-fg">.</span>isdigit<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">and</span> <span class="ansi-green-fg">not</span> name<span class="ansi-blue-fg">.</span>islower<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1176</span>             <span class="ansi-red-fg"># check for potentially case sensitivity issues (GH7815)</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/io/sql.py</span> in <span class="ansi-cyan-fg">insert</span><span class="ansi-blue-fg">(self, chunksize, method)</span>
<span class="ansi-green-intense-fg ansi-bold">    684</span> 
<span class="ansi-green-intense-fg ansi-bold">    685</span>                 chunk_iter <span class="ansi-blue-fg">=</span> zip<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span><span class="ansi-blue-fg">[</span>arr<span class="ansi-blue-fg">[</span>start_i<span class="ansi-blue-fg">:</span>end_i<span class="ansi-blue-fg">]</span> <span class="ansi-green-fg">for</span> arr <span class="ansi-green-fg">in</span> data_list<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">--&gt; 686</span><span class="ansi-red-fg">                 </span>exec_insert<span class="ansi-blue-fg">(</span>conn<span class="ansi-blue-fg">,</span> keys<span class="ansi-blue-fg">,</span> chunk_iter<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    687</span> 
<span class="ansi-green-intense-fg ansi-bold">    688</span>     def _query_iterator(self, result, chunksize, columns, coerce_float=True,

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/pandas/io/sql.py</span> in <span class="ansi-cyan-fg">_execute_insert</span><span class="ansi-blue-fg">(self, conn, keys, data_iter)</span>
<span class="ansi-green-intense-fg ansi-bold">    597</span>         &#34;&#34;&#34;
<span class="ansi-green-intense-fg ansi-bold">    598</span>         data <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>dict<span class="ansi-blue-fg">(</span>zip<span class="ansi-blue-fg">(</span>keys<span class="ansi-blue-fg">,</span> row<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">for</span> row <span class="ansi-green-fg">in</span> data_iter<span class="ansi-blue-fg">]</span>
<span class="ansi-green-fg">--&gt; 599</span><span class="ansi-red-fg">         </span>conn<span class="ansi-blue-fg">.</span>execute<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>table<span class="ansi-blue-fg">.</span>insert<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> data<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    600</span> 
<span class="ansi-green-intense-fg ansi-bold">    601</span>     <span class="ansi-green-fg">def</span> _execute_insert_multi<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> conn<span class="ansi-blue-fg">,</span> keys<span class="ansi-blue-fg">,</span> data_iter<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/engine/base.py</span> in <span class="ansi-cyan-fg">execute</span><span class="ansi-blue-fg">(self, object_, *multiparams, **params)</span>
<span class="ansi-green-intense-fg ansi-bold">    986</span>             <span class="ansi-green-fg">raise</span> exc<span class="ansi-blue-fg">.</span>ObjectNotExecutableError<span class="ansi-blue-fg">(</span>object_<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    987</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 988</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> meth<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> multiparams<span class="ansi-blue-fg">,</span> params<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    989</span> 
<span class="ansi-green-intense-fg ansi-bold">    990</span>     <span class="ansi-green-fg">def</span> _execute_function<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> func<span class="ansi-blue-fg">,</span> multiparams<span class="ansi-blue-fg">,</span> params<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/sql/elements.py</span> in <span class="ansi-cyan-fg">_execute_on_connection</span><span class="ansi-blue-fg">(self, connection, multiparams, params)</span>
<span class="ansi-green-intense-fg ansi-bold">    285</span>     <span class="ansi-green-fg">def</span> _execute_on_connection<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> connection<span class="ansi-blue-fg">,</span> multiparams<span class="ansi-blue-fg">,</span> params<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    286</span>         <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>supports_execution<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 287</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> connection<span class="ansi-blue-fg">.</span>_execute_clauseelement<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> multiparams<span class="ansi-blue-fg">,</span> params<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    288</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">    289</span>             <span class="ansi-green-fg">raise</span> exc<span class="ansi-blue-fg">.</span>ObjectNotExecutableError<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/engine/base.py</span> in <span class="ansi-cyan-fg">_execute_clauseelement</span><span class="ansi-blue-fg">(self, elem, multiparams, params)</span>
<span class="ansi-green-intense-fg ansi-bold">   1105</span>             distilled_params<span class="ansi-blue-fg">,</span>
<span class="ansi-green-intense-fg ansi-bold">   1106</span>             compiled_sql<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg">-&gt; 1107</span><span class="ansi-red-fg">             </span>distilled_params<span class="ansi-blue-fg">,</span>
<span class="ansi-green-intense-fg ansi-bold">   1108</span>         )
<span class="ansi-green-intense-fg ansi-bold">   1109</span>         <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>_has_events <span class="ansi-green-fg">or</span> self<span class="ansi-blue-fg">.</span>engine<span class="ansi-blue-fg">.</span>_has_events<span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/engine/base.py</span> in <span class="ansi-cyan-fg">_execute_context</span><span class="ansi-blue-fg">(self, dialect, constructor, statement, parameters, *args)</span>
<span class="ansi-green-intense-fg ansi-bold">   1246</span>         <span class="ansi-green-fg">except</span> BaseException <span class="ansi-green-fg">as</span> e<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1247</span>             self._handle_dbapi_exception(
<span class="ansi-green-fg">-&gt; 1248</span><span class="ansi-red-fg">                 </span>e<span class="ansi-blue-fg">,</span> statement<span class="ansi-blue-fg">,</span> parameters<span class="ansi-blue-fg">,</span> cursor<span class="ansi-blue-fg">,</span> context
<span class="ansi-green-intense-fg ansi-bold">   1249</span>             )
<span class="ansi-green-intense-fg ansi-bold">   1250</span> 

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/engine/base.py</span> in <span class="ansi-cyan-fg">_handle_dbapi_exception</span><span class="ansi-blue-fg">(self, e, statement, parameters, cursor, context)</span>
<span class="ansi-green-intense-fg ansi-bold">   1464</span>                 util<span class="ansi-blue-fg">.</span>raise_from_cause<span class="ansi-blue-fg">(</span>newraise<span class="ansi-blue-fg">,</span> exc_info<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1465</span>             <span class="ansi-green-fg">elif</span> should_wrap<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">-&gt; 1466</span><span class="ansi-red-fg">                 </span>util<span class="ansi-blue-fg">.</span>raise_from_cause<span class="ansi-blue-fg">(</span>sqlalchemy_exception<span class="ansi-blue-fg">,</span> exc_info<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">   1467</span>             <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1468</span>                 util<span class="ansi-blue-fg">.</span>reraise<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>exc_info<span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/util/compat.py</span> in <span class="ansi-cyan-fg">raise_from_cause</span><span class="ansi-blue-fg">(exception, exc_info)</span>
<span class="ansi-green-intense-fg ansi-bold">    381</span>     exc_type<span class="ansi-blue-fg">,</span> exc_value<span class="ansi-blue-fg">,</span> exc_tb <span class="ansi-blue-fg">=</span> exc_info
<span class="ansi-green-intense-fg ansi-bold">    382</span>     cause <span class="ansi-blue-fg">=</span> exc_value <span class="ansi-green-fg">if</span> exc_value <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> exception <span class="ansi-green-fg">else</span> <span class="ansi-green-fg">None</span>
<span class="ansi-green-fg">--&gt; 383</span><span class="ansi-red-fg">     </span>reraise<span class="ansi-blue-fg">(</span>type<span class="ansi-blue-fg">(</span>exception<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> exception<span class="ansi-blue-fg">,</span> tb<span class="ansi-blue-fg">=</span>exc_tb<span class="ansi-blue-fg">,</span> cause<span class="ansi-blue-fg">=</span>cause<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    384</span> 
<span class="ansi-green-intense-fg ansi-bold">    385</span> 

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/util/compat.py</span> in <span class="ansi-cyan-fg">reraise</span><span class="ansi-blue-fg">(tp, value, tb, cause)</span>
<span class="ansi-green-intense-fg ansi-bold">    126</span>             value<span class="ansi-blue-fg">.</span>__cause__ <span class="ansi-blue-fg">=</span> cause
<span class="ansi-green-intense-fg ansi-bold">    127</span>         <span class="ansi-green-fg">if</span> value<span class="ansi-blue-fg">.</span>__traceback__ <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> tb<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 128</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">raise</span> value<span class="ansi-blue-fg">.</span>with_traceback<span class="ansi-blue-fg">(</span>tb<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    129</span>         <span class="ansi-green-fg">raise</span> value
<span class="ansi-green-intense-fg ansi-bold">    130</span> 

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/engine/base.py</span> in <span class="ansi-cyan-fg">_execute_context</span><span class="ansi-blue-fg">(self, dialect, constructor, statement, parameters, *args)</span>
<span class="ansi-green-intense-fg ansi-bold">   1222</span>                 <span class="ansi-green-fg">if</span> <span class="ansi-green-fg">not</span> evt_handled<span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">   1223</span>                     self.dialect.do_executemany(
<span class="ansi-green-fg">-&gt; 1224</span><span class="ansi-red-fg">                         </span>cursor<span class="ansi-blue-fg">,</span> statement<span class="ansi-blue-fg">,</span> parameters<span class="ansi-blue-fg">,</span> context
<span class="ansi-green-intense-fg ansi-bold">   1225</span>                     )
<span class="ansi-green-intense-fg ansi-bold">   1226</span>             <span class="ansi-green-fg">elif</span> <span class="ansi-green-fg">not</span> parameters <span class="ansi-green-fg">and</span> context<span class="ansi-blue-fg">.</span>no_parameters<span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py</span> in <span class="ansi-cyan-fg">do_executemany</span><span class="ansi-blue-fg">(self, cursor, statement, parameters, context)</span>
<span class="ansi-green-intense-fg ansi-bold">    750</span>             extras<span class="ansi-blue-fg">.</span>execute_batch<span class="ansi-blue-fg">(</span>cursor<span class="ansi-blue-fg">,</span> statement<span class="ansi-blue-fg">,</span> parameters<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    751</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 752</span><span class="ansi-red-fg">             </span>cursor<span class="ansi-blue-fg">.</span>executemany<span class="ansi-blue-fg">(</span>statement<span class="ansi-blue-fg">,</span> parameters<span class="ansi-blue-fg">)</span>
<span class="ansi-green-intense-fg ansi-bold">    753</span> 
<span class="ansi-green-intense-fg ansi-bold">    754</span>     <span class="ansi-blue-fg">@</span>util<span class="ansi-blue-fg">.</span>memoized_instancemethod

<span class="ansi-red-fg">ProgrammingError</span>: (psycopg2.errors.UndefinedColumn) column &#34;country_id&#34; of relation &#34;Country&#34; does not exist
LINE 1: INSERT INTO &#34;Country&#34; (country_id, country_name) VALUES (&#39;GB...
                               ^

[SQL: INSERT INTO &#34;Country&#34; (country_id, country_name) VALUES (%(country_id)s, %(country_name)s)]
[parameters: ({&#39;country_id&#39;: &#39;GB&#39;, &#39;country_name&#39;: &#39;United Kingdom&#39;}, {&#39;country_id&#39;: &#39;SP&#39;, &#39;country_name&#39;: &#39;Spain&#39;}, {&#39;country_id&#39;: &#39;IT&#39;, &#39;country_name&#39;: &#39;Italy&#39;}, {&#39;country_id&#39;: &#39;IT&#39;, &#39;country_name&#39;: &#39;Italy&#39;}, {&#39;country_id&#39;: &#39;UY&#39;, &#39;country_name&#39;: &#39;Uruguay&#39;}, {&#39;country_id&#39;: &#39;CM&#39;, &#39;country_name&#39;: &#39;Cambodia&#39;}, {&#39;country_id&#39;: &#39;CM&#39;, &#39;country_name&#39;: &#39;Cameroon&#39;}, {&#39;country_id&#39;: &#39;BE&#39;, &#39;country_name&#39;: &#39;Belgium&#39;}  ... displaying 10 of 1523 total bound parameter sets ...  {&#39;country_id&#39;: &#39;ET&#39;, &#39;country_name&#39;: &#39;Ethiopia&#39;}, {&#39;country_id&#39;: &#39;VE&#39;, &#39;country_name&#39;: &#39;Venezuela&#39;})]
(Background on this error at: http://sqlalche.me/e/f405)</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# %%sql
SELECT * FROM Country
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
flat.to_sql?
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea ">
<pre><span class="ansi-red-fg">Signature:</span>
flat<span class="ansi-blue-fg">.</span>to_sql<span class="ansi-blue-fg">(</span>
    name<span class="ansi-blue-fg">,</span>
    con<span class="ansi-blue-fg">,</span>
    schema<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    if_exists<span class="ansi-blue-fg">=</span><span class="ansi-blue-fg">&#39;fail&#39;</span><span class="ansi-blue-fg">,</span>
    index<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
    index_label<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    chunksize<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    dtype<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    method<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
<span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Docstring:</span>
Write records stored in a DataFrame to a SQL database.

Databases supported by SQLAlchemy [1]_ are supported. Tables can be
newly created, appended to, or overwritten.

Parameters
----------
name : string
    Name of SQL table.
con : sqlalchemy.engine.Engine or sqlite3.Connection
    Using SQLAlchemy makes it possible to use any DB supported by that
    library. Legacy support is provided for sqlite3.Connection objects.
schema : string, optional
    Specify the schema (if database flavor supports this). If None, use
    default schema.
if_exists : {&#39;fail&#39;, &#39;replace&#39;, &#39;append&#39;}, default &#39;fail&#39;
    How to behave if the table already exists.

    * fail: Raise a ValueError.
    * replace: Drop the table before inserting new values.
    * append: Insert new values to the existing table.

index : bool, default True
    Write DataFrame index as a column. Uses `index_label` as the column
    name in the table.
index_label : string or sequence, default None
    Column label for index column(s). If None is given (default) and
    `index` is True, then the index names are used.
    A sequence should be given if the DataFrame uses MultiIndex.
chunksize : int, optional
    Rows will be written in batches of this size at a time. By default,
    all rows will be written at once.
dtype : dict, optional
    Specifying the datatype for columns. The keys should be the column
    names and the values should be the SQLAlchemy types or strings for
    the sqlite3 legacy mode.
method : {None, &#39;multi&#39;, callable}, default None
    Controls the SQL insertion clause used:

    * None : Uses standard SQL ``INSERT`` clause (one per row).
    * &#39;multi&#39;: Pass multiple values in a single ``INSERT`` clause.
    * callable with signature ``(pd_table, conn, keys, data_iter)``.

    Details and a sample callable implementation can be found in the
    section :ref:`insert method &lt;io.sql.method&gt;`.

    .. versionadded:: 0.24.0

Raises
------
ValueError
    When the table already exists and `if_exists` is &#39;fail&#39; (the
    default).

See Also
--------
read_sql : Read a DataFrame from a table.

Notes
-----
Timezone aware datetime columns will be written as
``Timestamp with timezone`` type with SQLAlchemy if supported by the
database. Otherwise, the datetimes will be stored as timezone unaware
timestamps local to the original timezone.

.. versionadded:: 0.24.0

References
----------
.. [1] http://docs.sqlalchemy.org
.. [2] https://www.python.org/dev/peps/pep-0249/

Examples
--------

Create an in-memory SQLite database.

&gt;&gt;&gt; from sqlalchemy import create_engine
&gt;&gt;&gt; engine = create_engine(&#39;sqlite://&#39;, echo=False)

Create a table from scratch with 3 rows.

&gt;&gt;&gt; df = pd.DataFrame({&#39;name&#39; : [&#39;User 1&#39;, &#39;User 2&#39;, &#39;User 3&#39;]})
&gt;&gt;&gt; df
     name
0  User 1
1  User 2
2  User 3

&gt;&gt;&gt; df.to_sql(&#39;users&#39;, con=engine)
&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM users&#34;).fetchall()
[(0, &#39;User 1&#39;), (1, &#39;User 2&#39;), (2, &#39;User 3&#39;)]

&gt;&gt;&gt; df1 = pd.DataFrame({&#39;name&#39; : [&#39;User 4&#39;, &#39;User 5&#39;]})
&gt;&gt;&gt; df1.to_sql(&#39;users&#39;, con=engine, if_exists=&#39;append&#39;)
&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM users&#34;).fetchall()
[(0, &#39;User 1&#39;), (1, &#39;User 2&#39;), (2, &#39;User 3&#39;),
 (0, &#39;User 4&#39;), (1, &#39;User 5&#39;)]

Overwrite the table with just ``df1``.

&gt;&gt;&gt; df1.to_sql(&#39;users&#39;, con=engine, if_exists=&#39;replace&#39;,
...            index_label=&#39;id&#39;)
&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM users&#34;).fetchall()
[(0, &#39;User 4&#39;), (1, &#39;User 5&#39;)]

Specify the dtype (especially useful for integers with missing values).
Notice that while pandas is forced to store the data as floating point,
the database supports nullable integers. When fetching the data with
Python, we get back integer scalars.

&gt;&gt;&gt; df = pd.DataFrame({&#34;A&#34;: [1, None, 2]})
&gt;&gt;&gt; df
     A
0  1.0
1  NaN
2  2.0

&gt;&gt;&gt; from sqlalchemy.types import Integer
&gt;&gt;&gt; df.to_sql(&#39;integers&#39;, con=engine, index=False,
...           dtype={&#34;A&#34;: Integer()})

&gt;&gt;&gt; engine.execute(&#34;SELECT * FROM integers&#34;).fetchall()
[(1,), (None,), (2,)]
<span class="ansi-red-fg">File:</span>      /opt/conda/lib/python3.7/site-packages/pandas/core/generic.py
<span class="ansi-red-fg">Type:</span>      method
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import asyncio

async def coro(int):
    print(f"running {int}")
    await asyncio.sleep(1)
    print(f"continuing {int}")
    return int
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
asyncio.run(coro)
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">RuntimeError</span>                              Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-109-550412da50e5&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>asyncio<span class="ansi-blue-fg">.</span>run<span class="ansi-blue-fg">(</span>coro<span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/opt/conda/lib/python3.7/asyncio/runners.py</span> in <span class="ansi-cyan-fg">run</span><span class="ansi-blue-fg">(main, debug)</span>
<span class="ansi-green-intense-fg ansi-bold">     32</span>     <span class="ansi-green-fg">if</span> events<span class="ansi-blue-fg">.</span>_get_running_loop<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-intense-fg ansi-bold">     33</span>         raise RuntimeError(
<span class="ansi-green-fg">---&gt; 34</span><span class="ansi-red-fg">             &#34;asyncio.run() cannot be called from a running event loop&#34;)
</span><span class="ansi-green-intense-fg ansi-bold">     35</span> 
<span class="ansi-green-intense-fg ansi-bold">     36</span>     <span class="ansi-green-fg">if</span> <span class="ansi-green-fg">not</span> coroutines<span class="ansi-blue-fg">.</span>iscoroutine<span class="ansi-blue-fg">(</span>main<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>

<span class="ansi-red-fg">RuntimeError</span>: asyncio.run() cannot be called from a running event loop</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python

```

</div>

</div>


