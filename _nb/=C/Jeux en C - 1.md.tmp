<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```c
//%cflags:-ltlphi_hdr
#include <tlphi_hdr.h>

int main() {
    int sem_wait(sem_t *sem);
    
    return 0
    
}
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stderr output_text">
<pre>/tmp/tmpmr2p5q5y.c:2:10: fatal error: tlphi_hdr.h: No such file or directory
 #include &lt;tlphi_hdr.h&gt;
          ^~~~~~~~~~~~~
compilation terminated.
[C kernel] GCC exited with code 1, the executable will not be executed</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```c
//%cflags:-lm

#include <stdio.h>
#include <math.h>

#define PI 3.14159265

double calc(int* a) {
    double val = PI * 3 * *a;
    *a = 3;
    printf("val= %lf\n", val);
    return val;
}

int main() {
    int a = 2;
    double val = calc(&a) * sin(a);
    printf("a = %lf, sin(a) = %lf", (double)a, val);
    
    return 0;
}
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>val= 18.849556
a = 3.000000, sin(a) = 2.660049</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```c
#include <stdio.h>
#include <stdlib.h>

int main() {

    int n = 10;
    int a[n];
    
    int *ptr = a;
    
    for (int i = 0; ptr < a + n; ptr++, i++) {
      *ptr = i * 3;
      printf("index=%i, a[i]=%i\n", i, *(a + i));
    }
    
}

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>index=0, a[i]=0
index=1, a[i]=3
index=2, a[i]=6
index=3, a[i]=9
index=4, a[i]=12
index=5, a[i]=15
index=6, a[i]=18
index=7, a[i]=21
index=8, a[i]=24
index=9, a[i]=27
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```c
#include <stdio.h>
#include <stdlib.h>

int main() {

    int n = 10;
    int a[n];
        
    for (int i = 0; i < n; i++) {
     a[i] = i * 2;
      printf("index=%i, a[i]=%i\n", i, a[i]);
    }
}

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>index=0, a[i]=0
index=1, a[i]=2
index=2, a[i]=4
index=3, a[i]=6
index=4, a[i]=8
index=5, a[i]=10
index=6, a[i]=12
index=7, a[i]=14
index=8, a[i]=16
index=9, a[i]=18
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```c
#include <stdio.h>
#include <stdlib.h>

int main() {

    int n = 10;
    float *fptr = malloc( n * sizeof(float));
    
    register float *last = fptr + n;
    *
    if ( fptr == NULL)
        printf("Hep");
    
    for (; fptr < last; fptr++)
      printf("index=%f\n", *fptr);
    
    
}

```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>index=0.000000
index=0.000000
index=0.000000
index=0.000000
index=0.000000
index=0.000000
index=0.000000
index=0.000000
index=0.000000
index=0.000000
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```c

```

</div>

</div>


